---
import { Button } from '@/components/ui/button';

interface Props {
  currentPage: number;
  totalPages: number;
  totalItems: number;
  prevUrl: string | undefined;
  nextUrl: string | undefined;
  basePath: string;
}

const {
  currentPage,
  totalPages,
  totalItems,
  prevUrl,
  nextUrl,
  basePath = '/games/'
} = Astro.props;

// 计算要显示的页码数量
function getPaginationNumbers(current: number, total: number, maxDisplayed: number = 7) {
  // 如果总页数小于或等于最大显示数，则显示所有页码
  if (total <= maxDisplayed) {
    return Array.from({ length: total }, (_, i) => i + 1);
  }

  // 否则，计算要显示哪些页码
  const half = Math.floor(maxDisplayed / 2);
  let start = Math.max(current - half, 1);
  let end = Math.min(start + maxDisplayed - 1, total);

  // 调整开始位置，确保显示正确数量的页码
  if (end - start + 1 < maxDisplayed) {
    start = Math.max(end - maxDisplayed + 1, 1);
  }

  return Array.from({ length: end - start + 1 }, (_, i) => start + i);
}

const pageNumbers = getPaginationNumbers(currentPage, totalPages);
---

<nav
  class="bg-white/70 backdrop-blur-md border border-white/20 shadow-lg rounded-xl p-6 text-center"
  aria-label="Games pagination"
>
  <div class="mb-4">
    <span class="text-sm text-gray-600">
      Page <strong class="text-gray-900 font-bold">{currentPage}</strong> of <strong class="text-gray-900 font-bold">{totalPages}</strong>
      <span class="text-gray-500 text-xs ml-2">({totalItems} games total)</span>
    </span>
  </div>

  <div class="pagination flex flex-col md:flex-row items-center justify-center gap-4">
    {prevUrl && (
      <Button variant="outline" size="sm" asChild>
        <a href={prevUrl} rel="prev" class="pagination-link gap-2">
          <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true" class="w-4 h-4">
            <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
          </svg>
          <span>Previous</span>
        </a>
      </Button>
    )}

    <div class="flex gap-2 items-center flex-wrap justify-center">
      {/* 显示第一页 (如果当前不是在第一个显示范围) */}
      {!pageNumbers.includes(1) && (
        <>
          <Button variant="outline" size="sm" asChild>
            <a href={basePath} class="pagination-link">1</a>
          </Button>
          <span class="text-gray-400 text-sm">...</span>
        </>
      )}

      {/* 显示计算出的页码 */}
      {pageNumbers.map((pageNum) => {
        const isCurrentPage = pageNum === currentPage;
        const pageUrl = pageNum === 1 ? basePath : `${basePath}${pageNum}/`;

        return (
          <Button
            variant={isCurrentPage ? "default" : "outline"}
            size="sm"
            asChild
          >
            <a
              href={pageUrl}
              aria-current={isCurrentPage ? 'page' : undefined}
              aria-label={`Page ${pageNum}`}
              class="pagination-link"
            >
              {pageNum}
            </a>
          </Button>
        );
      })}

      {/* 显示最后一页 (如果当前不是在最后一个显示范围) */}
      {!pageNumbers.includes(totalPages) && totalPages > 1 && (
        <>
          <span class="text-gray-400 text-sm">...</span>
          <Button variant="outline" size="sm" asChild>
            <a href={`${basePath}${totalPages}/`} class="pagination-link">{totalPages}</a>
          </Button>
        </>
      )}
    </div>

    {nextUrl && (
      <Button variant="outline" size="sm" asChild>
        <a href={nextUrl} rel="next" class="pagination-link gap-2">
          <span>Next</span>
          <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true" class="w-4 h-4">
            <path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z"/>
          </svg>
        </a>
      </Button>
    )}
  </div>
</nav>
