---
import { getTranslation, LOCALE_NAMES, type SupportedLocale } from '@/i18n/utils';
import { getRelativeLocaleUrl } from 'astro:i18n';
import LanguageSelectorNative from './LanguageSelectorNative.astro'

interface Props {
  currentPath?: string
  className?: string
}

const { currentPath = '', className = '' } = Astro.props

// 使用Astro官方i18n系统获取当前语言
const currentLocale = (Astro.currentLocale as SupportedLocale) || 'en';
const { ui: uiText } = await getTranslation(currentLocale);

// 安全的获取当前页面路径（不含语言前缀） - 动态移除前缀（SEO友好，避免硬编码）
let pathWithoutLocale = '/';
try {
  const url = new URL(Astro.request.url);
  const pathname = url.pathname || '/';

  // 根据受支持语言动态构造去前缀正则
  const SUPPORTED = Object.keys(LOCALE_NAMES).filter(code => code !== 'en');
  const prefixPattern = new RegExp(`^/(?:${SUPPORTED.join('|')})(?=/|$)`, 'i');

  // 移除语言前缀
  pathWithoutLocale = pathname.replace(prefixPattern, '') || '/';
} catch (error) {
  console.warn('Failed to parse pathname for language selector', error);
  pathWithoutLocale = '/';
}

// 语言配置使用Astro i18n helpers和新的翻译系统
const languages = Object.entries(LOCALE_NAMES).map(([code, label]) => ({
  code: code as SupportedLocale,
  label,
  path: getRelativeLocaleUrl(code as SupportedLocale, pathWithoutLocale)
}));
---

<div class={`language-selector ${className}`}>
  <LanguageSelectorNative 
    currentLang={currentLocale}
    languages={languages}
    ariaLabel={uiText?.navigation?.language || 'Language'}
  />
</div>