---
// Grid Test Utility Component
// This component validates that our grid classes work correctly across all breakpoints

interface GridTestResult {
  variant: string;
  classes: string;
  breakpoints: {
    default: number;
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
    '2xl': number;
  };
}

const gridVariants = {
  standard: 'grid gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5',
  featured: 'grid gap-8 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3',
  compact: 'grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6'
};

// Extract column counts from grid classes
function extractColumnCounts(classes: string): GridTestResult['breakpoints'] {
  const patterns = {
    default: /grid-cols-(\d+)(?!\w)/,
    xs: /xs:grid-cols-(\d+)/,
    sm: /sm:grid-cols-(\d+)/,
    md: /md:grid-cols-(\d+)/,
    lg: /lg:grid-cols-(\d+)/,
    xl: /xl:grid-cols-(\d+)/,
    '2xl': /2xl:grid-cols-(\d+)/
  };

  const result: GridTestResult['breakpoints'] = {
    default: 1,
    xs: 1,
    sm: 1,
    md: 1,
    lg: 1,
    xl: 1,
    '2xl': 1
  };

  for (const [breakpoint, pattern] of Object.entries(patterns)) {
    const match = classes.match(pattern);
    if (match) {
      result[breakpoint as keyof GridTestResult['breakpoints']] = parseInt(match[1]);
    }
  }

  return result;
}

const testResults: GridTestResult[] = Object.entries(gridVariants).map(([variant, classes]) => ({
  variant,
  classes,
  breakpoints: extractColumnCounts(classes)
}));

// Validate that our grid system meets requirements
const validationResults = {
  standardGrid: {
    expected: { default: 1, xs: 1, sm: 2, md: 3, lg: 4, xl: 5, '2xl': 5 },
    actual: testResults.find(r => r.variant === 'standard')?.breakpoints,
    valid: false
  },
  featuredGrid: {
    expected: { default: 1, xs: 1, sm: 2, md: 2, lg: 3, xl: 3, '2xl': 3 },
    actual: testResults.find(r => r.variant === 'featured')?.breakpoints,
    valid: false
  },
  compactGrid: {
    expected: { default: 2, xs: 2, sm: 3, md: 4, lg: 6, xl: 6, '2xl': 6 },
    actual: testResults.find(r => r.variant === 'compact')?.breakpoints,
    valid: false
  }
};

// Check validation
for (const [key, validation] of Object.entries(validationResults)) {
  if (validation.actual) {
    validation.valid = JSON.stringify(validation.expected) === JSON.stringify(validation.actual);
  }
}

const allValid = Object.values(validationResults).every(v => v.valid);
---

<div class="grid-test-utility bg-card border rounded-lg p-6 mb-8">
  <h3 class="text-lg font-semibold text-card-foreground mb-4">
    Grid System Validation Results
  </h3>
  
  <div class="space-y-4">
    {testResults.map((result) => (
      <div class="border rounded p-4">
        <h4 class="font-medium text-card-foreground mb-2 capitalize">
          {result.variant} Grid
        </h4>
        <p class="text-sm text-muted-foreground mb-2 font-mono">
          {result.classes}
        </p>
        <div class="grid grid-cols-7 gap-2 text-xs">
          <div class="text-center">
            <div class="font-medium">Default</div>
            <div>{result.breakpoints.default}</div>
          </div>
          <div class="text-center">
            <div class="font-medium">xs</div>
            <div>{result.breakpoints.xs}</div>
          </div>
          <div class="text-center">
            <div class="font-medium">sm</div>
            <div>{result.breakpoints.sm}</div>
          </div>
          <div class="text-center">
            <div class="font-medium">md</div>
            <div>{result.breakpoints.md}</div>
          </div>
          <div class="text-center">
            <div class="font-medium">lg</div>
            <div>{result.breakpoints.lg}</div>
          </div>
          <div class="text-center">
            <div class="font-medium">xl</div>
            <div>{result.breakpoints.xl}</div>
          </div>
          <div class="text-center">
            <div class="font-medium">2xl</div>
            <div>{result.breakpoints['2xl']}</div>
          </div>
        </div>
      </div>
    ))}
  </div>

  <div class={`mt-6 p-4 rounded-lg ${allValid ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}>
    <div class={`font-medium ${allValid ? 'text-green-800' : 'text-red-800'}`}>
      {allValid ? '✅ All grid variants are correctly configured' : '❌ Some grid variants need adjustment'}
    </div>
    {!allValid && (
      <div class="mt-2 text-sm text-red-700">
        <p>Check the validation results above for specific issues.</p>
      </div>
    )}
  </div>
</div>