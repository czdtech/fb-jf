---
import type { NavigationItem, Language } from '@/types';

export interface Props {
  navigation: NavigationItem[];
  languages: Language[];
  currentLang?: string;
  currentPath?: string;
}

const { navigation, languages, currentLang = 'en', currentPath = '/' } = Astro.props;
---

<header class="header">
    <div class="container">
        <nav class="nav">
            <!-- Logo -->
            <a href="/" class="nav-brand">
                <span class="brand-text">FiddleBops</span>
            </a>
            
            <!-- Desktop Navigation -->
            <ul class="nav-menu desktop-only">
                {navigation.map((item) => (
                    <li class="nav-item">
                        <a href={item.url} class={`nav-link ${currentPath === item.url ? 'active' : ''}`}>
                            {item.label}
                        </a>
                    </li>
                ))}
            </ul>
            
            <!-- Desktop Language Selector -->
            <div class="nav-language desktop-only">
                <div class="language-selector glass" onclick="document.getElementById('languageSelector').focus(); document.getElementById('languageSelector').click();">
                    <span class="language-icon">üåê</span>
                    <span class="language-text" id="languageText">
                        {languages.find(lang => lang.code === currentLang)?.label || 'English'}
                    </span>
                    <select id="languageSelector" class="language-select">
                        {languages.map((lang) => (
                            <option 
                                value={lang.code}
                                data-lang={lang.code} 
                                data-url={lang.url}
                                selected={lang.code === currentLang}
                            >
                                {lang.label}
                            </option>
                        ))}
                    </select>
                    <span class="language-arrow">‚ñº</span>
                </div>
            </div>
            
            <!-- Mobile Menu Toggle -->
            <button class="mobile-menu-toggle" aria-label="Toggle Navigation" aria-expanded="false">
                <span class="hamburger-line"></span>
                <span class="hamburger-line"></span>
                <span class="hamburger-line"></span>
            </button>
        </nav>
    </div>
    
    <!-- Mobile Navigation Overlay -->
    <div class="mobile-nav-overlay" aria-hidden="true">
        <div class="mobile-nav-content">
            <!-- Mobile Navigation Menu -->
            <ul class="mobile-nav-menu">
                <li class="mobile-nav-header">
                    <span class="mobile-nav-title">Navigation</span>
                </li>
                {navigation.map((item) => (
                    <li class="mobile-nav-item">
                        <a href={item.url} class={`mobile-nav-link ${currentPath === item.url ? 'active' : ''}`}>
                            <span class="nav-icon">üéµ</span>
                            {item.label}
                        </a>
                    </li>
                ))}
            </ul>
            
            <!-- Mobile Language Selector -->
            <div class="mobile-language-section">
                <div class="mobile-nav-header">
                    <span class="mobile-nav-title">Language</span>
                </div>
                <div class="mobile-language-grid">
                    {languages.map((lang) => (
                        <button 
                            class={`mobile-language-item ${lang.code === currentLang ? 'active' : ''}`}
                            data-lang={lang.code}
                            data-url={lang.url}
                        >
                            <span class="language-flag">{lang.flag || 'üåê'}</span>
                            <span class="language-name">{lang.label}</span>
                        </button>
                    ))}
                </div>
            </div>
        </div>
    </div>
</header>

<script>
// Desktop language selector
function goToLink(event) {
  const select = event.target;
  const selectedOption = select.options[select.selectedIndex];
  const url = selectedOption.getAttribute('data-url');
  if (url) {
    window.location.href = url;
  }
}

// Mobile navigation and language functionality
document.addEventListener('DOMContentLoaded', () => {
  // Desktop language selector
  const select = document.querySelector('#languageSelector');
  if (select) {
    select.addEventListener('change', goToLink);
    
    // ËÆæÁΩÆÂΩìÂâçËØ≠Ë®Ä
    const htmlLang = document.documentElement.lang;
    const options = Array.from(select.options);
    
    const currentOption = options.find(option =>
      option.getAttribute('data-lang') === htmlLang
    );
    
    if (currentOption) {
      currentOption.selected = true;
    }
  }
  
  // Mobile menu toggle
  const mobileToggle = document.querySelector('.mobile-menu-toggle');
  const mobileOverlay = document.querySelector('.mobile-nav-overlay');
  const body = document.body;
  
  if (mobileToggle && mobileOverlay) {
    mobileToggle.addEventListener('click', () => {
      const isOpen = mobileToggle.getAttribute('aria-expanded') === 'true';
      
      // Toggle states
      mobileToggle.setAttribute('aria-expanded', !isOpen);
      mobileOverlay.setAttribute('aria-hidden', isOpen);
      
      // Toggle classes
      mobileToggle.classList.toggle('active');
      mobileOverlay.classList.toggle('active');
      body.classList.toggle('nav-open');
    });
    
    // Close mobile menu when clicking outside
    mobileOverlay.addEventListener('click', (e) => {
      if (e.target === mobileOverlay) {
        closeMobileMenu();
      }
    });
    
    // Close mobile menu with escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileOverlay.classList.contains('active')) {
        closeMobileMenu();
      }
    });
    
    function closeMobileMenu() {
      mobileToggle.setAttribute('aria-expanded', 'false');
      mobileOverlay.setAttribute('aria-hidden', 'true');
      mobileToggle.classList.remove('active');
      mobileOverlay.classList.remove('active');
      body.classList.remove('nav-open');
    }
    
    // Mobile navigation links
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', () => {
        // Close menu when navigation link is clicked
        setTimeout(closeMobileMenu, 150);
      });
    });
  }
  
  // Mobile language selector
  const mobileLanguageItems = document.querySelectorAll('.mobile-language-item');
  mobileLanguageItems.forEach(item => {
    item.addEventListener('click', () => {
      const url = item.getAttribute('data-url');
      if (url) {
        window.location.href = url;
      }
    });
  });
});
</script>