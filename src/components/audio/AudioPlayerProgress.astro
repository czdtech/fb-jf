---
export interface Props {
  uniqueId: string;
  showProgress?: boolean;
  useSlider?: boolean;
  className?: string;
}

const { 
  uniqueId, 
  showProgress = true, 
  useSlider = true, 
  className = "" 
} = Astro.props;
---

{showProgress && (
  <div class={`audio-progress-container flex-1 ${className}`}>
    {useSlider ? (
      <!-- Use external AudioSlider component if available -->
      <div class="audio-slider-wrapper w-full">
        <div 
          id={`audio-slider-${uniqueId}`}
          class="audio-slider-container"
          role="slider"
          aria-valuemin="0"
          aria-valuemax="100"
          aria-valuenow="0"
          aria-label="Audio progress"
          tabindex="0"
        >
          <!-- Slider will be initialized by AudioSlider component -->
        </div>
      </div>
    ) : (
      <!-- Fallback progress bar -->
      <div 
        class="fallback-progress-bar w-full h-2 bg-muted rounded-full cursor-pointer relative overflow-hidden"
        role="progressbar"
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow="0"
        aria-label="Audio progress"
        tabindex="0"
      >
        <div 
          class="progress-fill audio-progress-bar h-full bg-primary rounded-full transition-all duration-100 ease-linear"
          style="width: 0%"
        ></div>
        
        <!-- Interactive overlay for click handling -->
        <div class="absolute inset-0 cursor-pointer"></div>
      </div>
    )}
  </div>
)}

<style>
  .audio-progress-container {
    display: flex;
    align-items: center;
  }
  
  .audio-slider-wrapper {
    width: 100%;
  }
  
  .fallback-progress-bar {
    cursor: pointer;
  }
  
  .fallback-progress-bar:focus {
    outline: 2px solid hsl(var(--primary));
    outline-offset: 2px;
  }
  
  .fallback-progress-bar:hover .progress-fill {
    background-color: hsl(var(--primary) / 0.8);
  }
  
  /* Touch-friendly progress bar */
  @media (hover: none) and (pointer: coarse) {
    .fallback-progress-bar {
      height: 8px; /* Larger touch target */
      border-radius: 4px;
    }
    
    .progress-fill {
      border-radius: 4px;
    }
  }
  
  /* High contrast mode */
  @media (prefers-contrast: high) {
    .fallback-progress-bar {
      border: 1px solid;
    }
    
    .progress-fill {
      border: 1px solid hsl(var(--primary));
    }
  }
  
  /* Keyboard navigation */
  .fallback-progress-bar:focus-visible {
    outline: 2px solid hsl(var(--primary));
    outline-offset: 2px;
  }
</style>

<script>
  // Add keyboard navigation support for fallback progress bar
  document.addEventListener('DOMContentLoaded', () => {
    const progressBars = document.querySelectorAll('.fallback-progress-bar[tabindex="0"]');
    
    progressBars.forEach(progressBar => {
      progressBar.addEventListener('keydown', (e) => {
        const event = e as KeyboardEvent;
        const target = event.target as HTMLElement;
        
        if (!target) return;
        
        const currentValue = parseFloat(target.getAttribute('aria-valuenow') || '0');
        let newValue = currentValue;
        
        switch (event.key) {
          case 'ArrowLeft':
          case 'ArrowDown':
            newValue = Math.max(0, currentValue - 5);
            event.preventDefault();
            break;
          case 'ArrowRight':
          case 'ArrowUp':
            newValue = Math.min(100, currentValue + 5);
            event.preventDefault();
            break;
          case 'Home':
            newValue = 0;
            event.preventDefault();
            break;
          case 'End':
            newValue = 100;
            event.preventDefault();
            break;
        }
        
        if (newValue !== currentValue) {
          target.setAttribute('aria-valuenow', newValue.toString());
          
          // Update visual progress
          const progressFill = target.querySelector('.progress-fill') as HTMLElement;
          if (progressFill) {
            progressFill.style.width = `${newValue}%`;
          }
          
          // Dispatch custom event for audio seeking
          const seekEvent = new CustomEvent('audioSeek', {
            detail: { percentage: newValue / 100 }
          });
          target.dispatchEvent(seekEvent);
        }
      });
    });
  });
</script>