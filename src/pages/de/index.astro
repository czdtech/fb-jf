---
// Astro官方i18n系统会自动提供currentLocale为'de'
import BaseLayout from '@/layouts/BaseLayout.astro'
import Navigation from '@/components/Navigation.astro'
import Footer from '@/components/Footer.astro'

// Import new clean sections with shadcn/ui
import HeroSectionNew from '@/components/sections/HeroSectionNew.astro'
import HowToPlaySection from '@/components/sections/HowToPlaySection.astro'
import SoundSamplesSection from '@/components/sections/SoundSamplesSection.astro'
import VideosSection from '@/components/sections/VideosSection.astro'
import FAQSection from '@/components/sections/FAQSection.astro'

// Import i18n system and game config
import { getCollection } from 'astro:content';
import { getTranslation, SUPPORTED_LOCALES, LOCALE_NAMES, type SupportedLocale } from '@/i18n/utils';
import { getLocalizedGamesList } from '@/utils/i18n';
import { getAbsoluteLocaleUrl } from 'astro:i18n';
import { generateHreflangLinks } from '@/utils/hreflang';
import extractedData from '@/data/extracted-data.json';
import { HOMEPAGE_GAME_COUNTS } from '@/config/game-config';

// Astro官方i18n系统自动提供currentLocale
const currentLocale: SupportedLocale = (Astro.currentLocale as SupportedLocale) || 'en';

// 获取翻译内容
const translation = await getTranslation(currentLocale);
const uiText = translation.ui;
const homeContent = translation.home;

// 获取本地化的游戏集合 - 使用集中配置的数量，添加错误处理
let localizedGames;
try {
  localizedGames = await getLocalizedGamesList(currentLocale);
} catch (error) {
  console.error('[de/index] 获取游戏列表失败:', error);
  localizedGames = [];
}
const popularGames = localizedGames.filter((game: any) => game.data.category === 'popular').slice(0, HOMEPAGE_GAME_COUNTS.popular);
const newGames = localizedGames.filter((game: any) => game.data.category === 'new').slice(0, HOMEPAGE_GAME_COUNTS.new);
const trendingGames = localizedGames.filter((game: any) => game.data.category === 'trending').slice(0, HOMEPAGE_GAME_COUNTS.trending);

const games = {
  popular: popularGames.map((g: any) => ({ slug: g.slug, ...g.data })),
  new: newGames.map((g: any) => ({ slug: g.slug, ...g.data })),
  trending: trendingGames.map((g: any) => ({ slug: g.slug, ...g.data })),
};

// 生成 hreflang 链接
const SITE_URL = (import.meta.env.PUBLIC_SITE_URL || 'https://www.playfiddlebops.com').replace(/\/$/, '');
const languages = Object.entries(LOCALE_NAMES).map(([code, label]) => ({
  code,
  label,
  url: ''
}));
const hreflangLinks = generateHreflangLinks(languages as any, '/', SITE_URL);

// 构建页面meta数据
const pageMeta = {
  title: uiText?.meta?.title || extractedData.homepage.meta.title,
  description: uiText?.meta?.description || extractedData.homepage.meta.description,
  keywords: uiText?.meta?.keywords || extractedData.homepage.meta.keywords,
  canonical: getAbsoluteLocaleUrl(currentLocale, '/'),
  ogImage: extractedData.homepage.meta.ogImage
};

// 获取完整的25个角色音频数据
const soundSamples = extractedData.homepage.soundSamples.map((sample: any) => ({
  name: sample.title,
  title: sample.title,
  image: sample.image,
  audioSrc: sample.audio,
  category: sample.category,
  color: sample.category === 'Beats' ? '#FF6B6B' :
         sample.category === 'Effects' ? '#4ECDC4' :
         sample.category === 'Melodies' ? '#45B7D1' :
         sample.category === 'Voices' ? '#FFA726' :
         '#9C27B0' // Bonus characters
}));

// 结构化数据：网站级（首页） + 视频 JSON-LD（合并为 @graph）
const websiteNode = {
  '@type': 'WebSite',
  name: pageMeta.title,
  alternateName: 'playfiddlebops.com',
  url: pageMeta.canonical,
  description: pageMeta.description,
};

// 从数据文件获取视频信息并构建结构化数据
const videoObjects = extractedData.homepage.videos.map((video: any) => ({
  '@type': 'VideoObject',
  name: video.name,
  description: video.description,
  thumbnailUrl: [video.thumbnailUrl],
  uploadDate: video.uploadDate,
  embedUrl: video.embedUrl,
  contentUrl: video.contentUrl,
  publisher: { '@type': 'Organization', name: video.publisher },
}));

const structuredData = {
  '@context': 'https://schema.org',
  '@graph': [websiteNode, ...videoObjects],
};
---

<BaseLayout
  meta={pageMeta}
  lang={currentLocale}
  hreflang={hreflangLinks}
  structuredData={structuredData}
>
  <Navigation
    locale={currentLocale}
    currentPath="/de/"
  />

  <main id="main-content" class="min-h-screen" role="main">
    <!-- Clean Hero Section with shadcn/ui components -->
    <HeroSectionNew
      hero={{
        title: uiText?.hero?.title || extractedData.homepage.hero.title,
        description: uiText?.hero?.subtitle || extractedData.homepage.hero.description,
        mainGame: extractedData.homepage.hero.mainGame
      }}
      games={games}
    />

    <!-- How to Play Section -->
    <HowToPlaySection />

    <!-- About Section -->

    <!-- Sound Samples Section -->
    <SoundSamplesSection soundSamples={soundSamples} />

    <!-- Video Section -->
    <VideosSection />

    <!-- FAQ Section -->
    <FAQSection />

  </main>

  <Footer />
</BaseLayout>

<script type="module">
    import { initHomepage } from '@/scripts/pages/homepage.js';
    initHomepage();
  </script>

<style>
  /* Minimal custom styles - most styling now handled by Tailwind utilities */

  /* Font loading optimization */
  * {
    font-display: swap;
  }

  /* Image optimization */
  img {
    max-width: 100%;
    height: auto;
  }

  .game-iframe-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Scroll animations using Tailwind-compatible approach */
  .scroll-animate {
    @apply opacity-0 translate-y-8 transition-all duration-700 ease-out;
  }

  .scroll-animate.animate {
    @apply opacity-100 translate-y-0;
  }
</style>
