---
import BaseLayout from '@/layouts/BaseLayout.astro'
import Navigation from '@/components/Navigation.astro'
import Footer from '@/components/Footer.astro'

// Import new clean sections with shadcn/ui
import HeroSectionNew from '@/components/sections/HeroSectionNew.astro'
import HowToPlaySection from '@/components/sections/HowToPlaySection.astro'
import AboutSection from '@/components/sections/AboutSection.astro'
import SoundSamplesSection from '@/components/sections/SoundSamplesSection.astro'
import VideosSection from '@/components/sections/VideosSection.astro'
import FAQSection from '@/components/sections/FAQSection.astro'

// Import i18n system
import { getCollection } from 'astro:content';
import { getTranslation, SUPPORTED_LOCALES, LOCALE_NAMES, type SupportedLocale } from '@/i18n/utils';
import { getAbsoluteLocaleUrl } from 'astro:i18n';
import { generateHomeHreflangLinks } from '@/utils/hreflang';
import extractedData from '@/data/extracted-data.json';

// Ëé∑ÂèñÂΩìÂâçËØ≠Ë®Ä - ‰ΩøÁî®AstroÂÆòÊñπi18nÁ≥ªÁªü
const currentLocale: SupportedLocale = (Astro.currentLocale as SupportedLocale) || 'en';

// Ëé∑ÂèñÁøªËØëÂÜÖÂÆπ
const translation = await getTranslation(currentLocale);
const uiText = translation.ui;
const homeContent = translation.home;

// Ëé∑ÂèñÂΩìÂâçËØ≠Ë®ÄÁöÑÊ∏∏Êàè - Â∑≤‰ºòÂåñÁâàÊú¨
const currentPath = Astro.url.pathname;

let allGames: any[] = [];

try {
  // üîß Â∞ùËØïÁõ¥Êé•Ëé∑ÂèñËã±ÊñáÊ∏∏ÊàèÔºàÊ†πÁõÆÂΩï‰∏ãÁöÑÊñá‰ª∂Ôºâ
  let englishGamesOnly;
  try {
    englishGamesOnly = await getCollection('games', ({ id }) => !id.includes('/'));
    console.log('Direct English games query result:', englishGamesOnly.length);
  } catch (englishError) {
    console.error('Error loading English games directly:', englishError);
    englishGamesOnly = [];
  }
  
  // Ëé∑ÂèñÊâÄÊúâÊ∏∏ÊàèËøõË°åÂàÜÊûê
  const allGamesRaw = await getCollection('games');
  
  // Ë∞ÉËØïÔºöÊâìÂç∞Ê∏∏ÊàèIDÊ†ºÂºè‰ª•Á°ÆËÆ§ÂÆûÈôÖÁªìÊûÑ
  console.log('Total games loaded:', allGamesRaw.length);
  
  // Â∞ùËØïËé∑ÂèñÁâπÂÆöËØ≠Ë®ÄÁöÑÊ∏∏Êàè
  const languageStats = {};
  allGamesRaw.forEach(game => {
    const gameId = game.id.replace(/\.md$/, '');
    let lang;
    if (gameId.includes('/')) {
      lang = gameId.split('/')[0];
    } else {
      lang = 'en'; // Ê†πÁõÆÂΩïÊñá‰ª∂ÊòØËã±Êñá
    }
    languageStats[lang] = (languageStats[lang] || 0) + 1;
  });
  console.log('Language distribution:', languageStats);
  console.log('Current locale:', currentLocale);
  
  // ÊâãÂä®ËøáÊª§ÂΩìÂâçËØ≠Ë®ÄÁöÑÊ∏∏Êàè
  const currentLocaleGames = allGamesRaw.filter(game => {
    const gameId = game.id.replace(/\.md$/, '');
    if (currentLocale === 'en') {
      // Ëã±ÊñáÊ∏∏ÊàèÂú®Ê†πÁõÆÂΩïÔºåID‰∏≠‰∏çÂåÖÂê´'/'
      return !gameId.includes('/');
    } else {
      // ÂÖ∂‰ªñËØ≠Ë®ÄÊ∏∏ÊàèÂú®Â≠êÁõÆÂΩïÔºåIDÊ†ºÂºè‰∏∫ "language/game-name"
      return gameId.startsWith(`${currentLocale}/`);
    }
  });
  
  allGames = currentLocaleGames;
  console.log(`Found ${allGames.length} games for locale ${currentLocale}`);
  
  // Ë∞ÉËØïÔºöÊ£ÄÊü•Ââç3‰∏™Ê∏∏ÊàèÁöÑÂÜÖÂÆπ
  if (allGames.length > 0) {
    console.log('Sample games content:');
    allGames.slice(0, 3).forEach((game, index) => {
      console.log(`${index + 1}. ${game.id} - ${game.data.title}`);
      console.log(`   Description: ${game.data.description.substring(0, 50)}...`);
    });
  }
  
  // FallbackÁ≠ñÁï•ÔºöÂ¶ÇÊûúÂΩìÂâçËØ≠Ë®ÄÊ≤°ÊúâÊ∏∏ÊàèÔºåfallbackÂà∞Ëã±Êñá
  if (allGames.length === 0 && currentLocale !== 'en') {
    const englishGames = allGamesRaw.filter(game => {
      const gameId = game.id.replace(/\.md$/, '');
      return !gameId.includes('/'); // Ëã±ÊñáÊ∏∏ÊàèÂú®Ê†πÁõÆÂΩï
    });
    allGames = englishGames;
    console.log(`Fallback to English: Found ${allGames.length} English games`);
  }
  
  // ÁâπÊÆäÂ§ÑÁêÜÔºöÂ¶ÇÊûúÊòØËã±ÊñáÈ°µÈù¢‰ΩÜÊ≤°ÊúâÊâæÂà∞Ê∏∏ÊàèÔºå‰ΩøÁî®Áõ¥Êé•Êü•ËØ¢ÁöÑÁªìÊûú
  if (currentLocale === 'en' && allGames.length === 0 && englishGamesOnly.length > 0) {
    allGames = englishGamesOnly;
    console.log(`Using direct English query result: ${allGames.length} games`);
  }
  
  // Â¶ÇÊûú‰ªçÁÑ∂Ê≤°ÊúâÊâæÂà∞Ê∏∏ÊàèÔºå‰ΩøÁî®Ââç20‰∏™‰Ωú‰∏∫Â∫îÊÄ•Â§á‰ªΩ
  if (allGames.length === 0) {
    allGames = allGamesRaw.slice(0, 20);
    console.log('Emergency fallback: Using first 20 games');
  }
  
} catch (collectionError) {
  console.error('Content collection loading failed:', collectionError);
  allGames = [];
}

const popularGames = allGames.filter((game: any) => game.data.category === 'popular').slice(0, 5);
const newGames = allGames.filter((game: any) => game.data.category === 'new').slice(0, 5);
const trendingGames = allGames.filter((game: any) => game.data.category === 'trending').slice(0, 10);

const games = {
  popular: popularGames.map((g: any) => ({ slug: g.slug, ...g.data })),
  new: newGames.map((g: any) => ({ slug: g.slug, ...g.data })),
  trending: trendingGames.map((g: any) => ({ slug: g.slug, ...g.data })),
};

// ÁîüÊàê hreflang ÈìæÊé•ÔºàÂØπÈΩê BaseLayout ÊúüÊúõÁöÑ { code, url, label } ÁªìÊûÑÔºâ
const SITE_URL = (import.meta.env.PUBLIC_SITE_URL || 'https://www.playfiddlebops.com').replace(/\/$/, '');
const languages = Object.entries(LOCALE_NAMES).map(([code, label]) => ({
  code,
  label,
  url: ''
}));
const hreflangLinks = generateHomeHreflangLinks(languages as any, SITE_URL);

// ÊûÑÂª∫È°µÈù¢metaÊï∞ÊçÆ
const pageMeta = {
  title: uiText?.meta?.title || 'FiddleBops - Play Music Games',
  description: uiText?.meta?.description || 'Create your unique music with FiddleBops!',
  keywords: uiText?.meta?.keywords || 'fiddlebops, music games, music creation',
  canonical: getAbsoluteLocaleUrl(currentLocale, '/'),
  ogImage: 'https://www.playfiddlebops.com/images/fiddlebops-og.jpg'
};

// Ëé∑ÂèñÂÆåÊï¥ÁöÑ25‰∏™ËßíËâ≤Èü≥È¢ëÊï∞ÊçÆ
const soundSamples = extractedData.homepage.soundSamples.map((sample: any) => ({
  name: sample.title,
  title: sample.title,
  image: sample.image,
  audioSrc: sample.audio,
  category: sample.category,
  color: sample.category === 'Beats' ? '#FF6B6B' : 
         sample.category === 'Effects' ? '#4ECDC4' :
         sample.category === 'Melodies' ? '#45B7D1' :
         sample.category === 'Voices' ? '#FFA726' :
         '#9C27B0' // Bonus characters
}));

// ÁªìÊûÑÂåñÊï∞ÊçÆÔºöÁΩëÁ´ôÁ∫ßÔºàÈ¶ñÈ°µÔºâ + ËßÜÈ¢ë JSON-LDÔºàÂêàÂπ∂‰∏∫ @graphÔºâ
const websiteNode = {
  '@type': 'WebSite',
  name: pageMeta.title,
  alternateName: 'playfiddlebops.com',
  url: pageMeta.canonical,
  description: pageMeta.description,
};

const videoObjects = [
  {
    '@type': 'VideoObject',
    name: 'FIDDLEBOPS ALL POLOS 4K (WITH SUBTITLES) #4',
    description: 'FIDDLEBOPS ALL POLOS 4K (WITH SUBTITLES) #4',
    thumbnailUrl: ['https://i.ytimg.com/vi/4Oj-dVLSA70/hqdefault.jpg'],
    uploadDate: '2024-11-14',
    embedUrl: 'https://www.youtube.com/embed/4Oj-dVLSA70',
    contentUrl: 'https://www.youtube.com/watch?v=4Oj-dVLSA70',
    publisher: { '@type': 'Organization', name: 'Mozziface' },
  },
  {
    '@type': 'VideoObject',
    name: 'Every Incredibox FiddleBops in 8 Minutes',
    description: 'Every Incredibox FiddleBops in 8 Minutes',
    thumbnailUrl: ['https://i.ytimg.com/vi/JlMa-fRBOwE/hqdefault.jpg'],
    uploadDate: '2024-12-29',
    embedUrl: 'https://www.youtube.com/embed/JlMa-fRBOwE',
    contentUrl: 'https://www.youtube.com/watch?v=JlMa-fRBOwE',
    publisher: { '@type': 'Organization', name: 'PlayGameWithZubby' },
  },
];

const structuredData = {
  '@context': 'https://schema.org',
  '@graph': [websiteNode, ...videoObjects],
};
---

<BaseLayout
  meta={pageMeta}
  lang={currentLocale}
  hreflang={hreflangLinks}
  structuredData={structuredData}
>
  <Navigation
    locale={currentLocale}
    currentPath="/"
  />

  <main id="main-content" class="min-h-screen" role="main">
    <!-- Clean Hero Section with shadcn/ui components -->
    <HeroSectionNew
      hero={{
        title: uiText?.hero?.title || 'Create Amazing Music with FiddleBops',
        description: uiText?.hero?.subtitle || 'Interactive music creation games with fun characters and unlimited creativity',
        mainGame: {
          iframe: 'https://fiddlebops.netlify.app/',
          backgroundImage: '/tw.jpg'
        }
      }}
      games={games}
    />

    <!-- How to Play Section -->
    <HowToPlaySection />

    <!-- About Section -->
    <AboutSection />

    <!-- Sound Samples Section -->
    <SoundSamplesSection soundSamples={soundSamples} />

    <!-- Video Section -->
    <VideosSection />

    <!-- FAQ Section -->
    <FAQSection />

  </main>

  <Footer />
</BaseLayout>

  <!-- ‰∫§‰∫íÁ≥ªÁªüÂ∑≤Áî± BaseLayout ÂÖ®Â±ÄÂºïÂÖ• -->

  <!--
    AURA-X: Modify - È¶ñÈ°µËÑöÊú¨Ê≤ªÁêÜÔºàB-1Ôºâ„ÄÇConfirmed via ÂØ∏Ê≠¢„ÄÇ
    - ÁßªÈô§ÂÖ®Â±Ä body Á∫ßÁõëÂê¨‰∏éÂêåÊ≠•Ê®°ÂùóÂØºÂÖ•
    - ÂΩì `.sound-samples-section` Êé•ËøëËßÜÁ™óÊó∂ÂÜçÂä®ÊÄÅÂä†ËΩΩËÑöÊú¨
    - ‰ªÖÂú®ËØ•Âå∫ÂùóÂÜÖÁªëÂÆöÁÇπÂáªÈü≥Á¨¶Âä®ÁîªÔºàËäÇÊµÅÔºâ
  -->
  <script type="module" is:inline>
    const scheduleLoad = () => {
      const section = document.querySelector('.sound-samples-section');
      if (!section) return;

      const loadModules = async () => {
        try {
          const [notesMod] = await Promise.all([
            import('/src/scripts/music-notes-animation.js'),
            // Èü≥È¢ëÁÆ°ÁêÜÂô®ËÑöÊú¨ÂÖ∑ÊúâÂâØ‰ΩúÁî®ÔºöÂàùÂßãÂåñÂç°Áâá‰∫ã‰ª∂ÔºåÊó†ÈúÄÂØºÂá∫
            import('/src/scripts/sound-sample-player.js'),
          ]);
          const { musicNotesAnimation } = notesMod;

          // ‰ªÖÂú®Â£∞Èü≥Á§∫‰æãÂå∫ÂùóÂÜÖÁªëÂÆöÁÇπÂáªÂä®ÁîªÔºåÈÅøÂÖçÂÖ®Â±ÄÁõëÂê¨
          let last = 0;
          section.addEventListener('click', (e) => {
            const now = Date.now();
            if (now - last < 200) return;
            last = now;
            musicNotesAnimation?.createClickAnimation?.(e, {
              noteCount: Math.floor(Math.random() * 3) + 1,
              staggerDelay: 100,
              duration: 1200,
            });
          }, { passive: true });
        } catch (err) {
          console.warn('[index] Âª∂ËøüÂä†ËΩΩ‰∫§‰∫íËÑöÊú¨Â§±Ë¥•', err);
        }
      };

      if ('IntersectionObserver' in window) {
        const io = new IntersectionObserver((entries) => {
          if (entries.some((en) => en.isIntersecting)) {
            io.disconnect();
            loadModules();
          }
        }, { rootMargin: '200px' });
        io.observe(section);
      } else if ('requestIdleCallback' in window) {
        // ÂÖúÂ∫ïÔºöÁ©∫Èó≤Êó∂Âä†ËΩΩ
        // @ts-ignore
        requestIdleCallback(() => loadModules());
      } else {
        setTimeout(() => loadModules(), 1);
      }
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', scheduleLoad);
    } else {
      scheduleLoad();
    }
  </script>

<style>
  /* Minimal custom styles - most styling now handled by Tailwind utilities */

  /* Font loading optimization */
  * {
    font-display: swap;
  }

  /* Image optimization */
  img {
    max-width: 100%;
    height: auto;
  }

  .game-iframe-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Scroll animations using Tailwind-compatible approach */
  .scroll-animate {
    @apply opacity-0 translate-y-8 transition-all duration-700 ease-out;
  }

  .scroll-animate.animate {
    @apply opacity-100 translate-y-0;
  }
</style>
