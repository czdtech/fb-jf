---
// 示例：在Astro页面中使用新的内容管理系统
import { getSimpleContent } from '@/lib/content-simple/SimpleContentManager';
import { getCurrentLocale } from '@/i18n/utils';

// 获取当前语言
const currentLocale = getCurrentLocale(Astro.url);

// 初始化内容管理器
const contentManager = getSimpleContent();

try {
  // 使用新的内容管理系统获取UI翻译
  const uiContent = await contentManager.getLocalizedContent(currentLocale, 'ui');
  const translations = uiContent.ui || {};
  
  // 获取静态数据
  const staticContent = await contentManager.getLocalizedContent(currentLocale, 'static');
  const staticData = staticContent.staticData || {};
  
  // 获取游戏列表
  const gamesContent = await contentManager.getLocalizedContent(currentLocale, 'games');
  const games = gamesContent.games || [];

  console.log('📊 Content loaded successfully:', {
    locale: currentLocale,
    uiKeys: Object.keys(translations).length,
    staticSections: Object.keys(staticData).length,
    gameCount: games.length,
    fallbackUsed: uiContent.meta?.fallbackUsed || false
  });

} catch (error) {
  console.error('❌ Failed to load content:', error);
}
---

<!DOCTYPE html>
<html lang={currentLocale}>
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <title>Content Management System Demo</title>
</head>
<body>
  <div class="container mx-auto py-8">
    <h1 class="text-3xl font-bold mb-6">FiddleBops Content Management System</h1>
    
    <div class="grid gap-6">
      <section class="bg-gray-100 p-4 rounded-lg">
        <h2 class="text-xl font-semibold mb-3">✅ Implementation Completed</h2>
        <ul class="space-y-2">
          <li>🏗️ Unified Content Management Interface (ContentManager.ts)</li>
          <li>🔌 Content Adapters (UI, Games, Static Data)</li>
          <li>📁 migrated extracted-data.json to Content Collections</li>
          <li>🏷️ Automatic TypeScript type generation</li>
          <li>🔄 Multi-level fallback strategy</li>
          <li>✅ Content validation system</li>
        </ul>
      </section>

      <section class="bg-blue-50 p-4 rounded-lg">
        <h2 class="text-xl font-semibold mb-3">🚀 Available Commands</h2>
        <div class="space-y-1 font-mono text-sm">
          <div><code>npm run content:validate</code> - Validate all content</div>
          <div><code>npm run content:types</code> - Generate TypeScript types</div>
          <div><code>npm run content:coverage</code> - Generate coverage report</div>
          <div><code>npm run content:sync</code> - Sync types and validate</div>
        </div>
      </section>

      <section class="bg-green-50 p-4 rounded-lg">
        <h2 class="text-xl font-semibold mb-3">📈 System Benefits</h2>
        <ul class="space-y-1">
          <li>• Unified content access layer</li>
          <li>• Automatic type safety</li>
          <li>• Smart fallback mechanisms</li>
          <li>• Runtime content validation</li>
          <li>• Performance caching</li>
          <li>• Build-time error detection</li>
        </ul>
      </section>

      <section class="bg-yellow-50 p-4 rounded-lg">
        <h2 class="text-xl font-semibold mb-3">🔧 File Structure Created</h2>
        <pre class="text-xs bg-white p-2 rounded overflow-x-auto"><code>src/
├── lib/content/
│   ├── ContentManager.ts         # Core content management
│   ├── FallbackStrategy.ts       # Multi-level fallbacks  
│   ├── adapters/
│   │   ├── UIContentAdapter.ts   # UI translations
│   │   ├── GameContentAdapter.ts # Game content
│   │   └── StaticDataAdapter.ts  # Static data
│   └── index.ts                  # Public API
├── content/
│   ├── staticData/              # New: Static data collections
│   │   └── en.json              # Migrated extracted-data
│   ├── i18nUI/                  # Existing UI translations
│   └── games/                   # Existing game content
scripts/
├── generate-content-types.ts    # Type generator
└── validate-content.ts          # Content validator</code></pre>
      </section>
    </div>
  </div>
</body>
</html>