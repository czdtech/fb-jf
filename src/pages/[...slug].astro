---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro'
import Navigation from '@/components/Navigation.astro'
import Footer from '@/components/Footer.astro'
import GameRating from '@/components/GameRating.astro'
import GameHero from '@/components/GameHero.astro'
import GameGrid from '@/components/GameGrid.astro'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import AudioPlayer from '@/components/audio/AudioPlayer.astro'

// Import utilities
import extractedData from '@/data/extracted-data.json'
import { generateGameHreflangLinks } from '@/utils/hreflang'
import { getTranslation, SUPPORTED_LOCALES } from '@/i18n/utils'
import {
  getGameMetadata,
  generateGamePaths,
  getRelatedGames,
  buildGameStructuredData
} from '@/utils/game-helpers'
import type { ExtractedData } from '@/types/game'

const { navigation } = extractedData as ExtractedData
const SITE_URL = Astro.site.toString().replace(/\/$/, '');

export async function getStaticPaths() {
  console.log('üîç [...slug].astro getStaticPaths() called...');

  const allGames = await getCollection('games');
  const paths: Array<{
    params: { slug: string };
    props: { game: CollectionEntry<'games'>; locale: string };
  }> = [];

  // Get English games as base
  const englishGames = allGames.filter(game => {
    const gameId = game.id.replace(/\.md$/, '');
    const isRootGame = !gameId.includes('/');
    const hasLanguagePrefix = /^(zh|es|fr|de|ja|ko)-/.test(gameId);
    return isRootGame && !hasLanguagePrefix;
  });

  console.log(`üìä Found ${englishGames.length} English games`);

  // Generate paths for all locales
  for (const game of englishGames) {
    const baseSlug = game.data.slug || game.id.replace(/\.md$/, '');
    const gamePaths = generateGamePaths(baseSlug);

    for (const { locale, slug } of gamePaths) {
      paths.push({
        params: { slug },
        props: { game, locale }
      });
    }
  }

  console.log(`‚úÖ Generated ${paths.length} paths`);
  return paths;
}

const { slug } = Astro.params;
const { game, locale } = Astro.props;

// Get localized metadata
const metadata = getGameMetadata(game, locale);
const translation = await getTranslation(locale);
const uiText = translation.ui;

// Get all games for related section
const allGames = await getCollection('games');
const relatedGames = await getRelatedGames(game, allGames, locale);

// Generate URLs
const canonicalUrl = locale === 'en'
  ? `${SITE_URL}/${game.data.slug}/`
  : `${SITE_URL}/${locale}/${game.data.slug}/`;

// Generate hreflang links
const hreflangLinks = await generateGameHreflangLinks(
  SUPPORTED_LOCALES.map(code => ({ code, label: '' })),
  game.data.slug,
  SITE_URL
);

// Build structured data
const structuredData = buildGameStructuredData(game, locale, SITE_URL);

// Default features for games
const defaultFeatures = [
  { icon: 'üéµ', title: 'Rich Music Creation', description: 'Create unique musical compositions with diverse sound elements' },
  { icon: 'üé≠', title: 'Character Variety', description: 'Choose from a wide range of animated characters, each with unique sounds' },
  { icon: 'üîÑ', title: 'Creative Freedom', description: 'Unlimited possibilities for mixing and matching sounds' },
  { icon: 'üí´', title: 'Visual Effects', description: 'Stunning animations and effects that react to your music' }
];

// Default play steps
const defaultSteps = [
  'Choose your favorite characters from the selection',
  'Drag and drop them onto the stage to start creating',
  'Experiment with different combinations to find your perfect mix',
  'Save and share your musical masterpiece with friends'
];

// Page meta
const pageMeta = {
  title: metadata.meta?.title || metadata.title,
  description: metadata.meta?.description || metadata.description,
  keywords: metadata.keywords,
  canonical: canonicalUrl,
  ogImage: `${SITE_URL}/${game.data.image}`
};

// Render markdown content (if any)
const hasContent = game.body && game.body.trim().length > 0;
---

<BaseLayout
  meta={pageMeta}
  lang={locale}
  hreflang={hreflangLinks}
  structuredData={structuredData}
>
  <Navigation
    locale={locale}
    currentPath={`/${slug}/`}
  />

  <main id="main-content" class="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50" role="main">
    <!-- Game Hero Section -->
    <GameHero
      game={game}
      locale={locale}
      title={metadata.title}
      description={metadata.description}
    />

    <!-- Main Game Container -->
    <div class="container mx-auto px-4 py-12">
      <div class="grid lg:grid-cols-3 gap-8">
        <!-- Game Iframe -->
        <div class="lg:col-span-2">
          <Card class="overflow-hidden">
            <CardContent class="p-0">
              <div class="game-iframe-container relative w-full" style="padding-bottom: 56.25%;">
                <iframe
                  src={game.data.iframe}
                  class="absolute top-0 left-0 w-full h-full rounded-lg"
                  title={metadata.title}
                  frameborder="0"
                  allowfullscreen
                  loading="lazy"
                ></iframe>
              </div>
            </CardContent>
          </Card>

          <!-- Game Description -->
          <Card class="mt-6">
            <CardHeader>
              <CardTitle class="text-2xl">
                {uiText?.game?.about || 'About this game'}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p class="text-muted-foreground leading-relaxed">
                {metadata.description}
              </p>
            </CardContent>
          </Card>
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1 space-y-6">
          <!-- Game Info Card -->
          <Card>
            <CardHeader>
              <CardTitle>{uiText?.game?.info || 'Game Info'}</CardTitle>
            </CardHeader>
            <CardContent class="space-y-4">
              <div>
                <h4 class="font-semibold mb-2">{uiText?.game?.category || 'Category'}</h4>
                <Badge variant="secondary" class="capitalize">
                  {game.data.category}
                </Badge>
              </div>

              {game.data.rating && (
                <div>
                  <h4 class="font-semibold mb-2">{uiText?.game?.rating || 'Rating'}</h4>
                  <GameRating rating={game.data.rating} />
                </div>
              )}

              {game.data.features && (
                <div>
                  <h4 class="font-semibold mb-2">Features</h4>
                  <ul class="space-y-1 text-sm text-muted-foreground">
                    {game.data.features.map((feature: string) => (
                      <li class="flex items-start">
                        <span class="mr-2">‚Ä¢</span>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </CardContent>
          </Card>

          <!-- Audio Player if exists -->
          {game.data.audio && (
            <Card>
              <CardHeader>
                <CardTitle>Soundtrack</CardTitle>
              </CardHeader>
              <CardContent>
                <AudioPlayer
                  src={game.data.audio}
                  title={metadata.title}
                />
              </CardContent>
            </Card>
          )}

          <!-- How to Play -->
          <Card>
            <CardHeader>
              <CardTitle>How to Play</CardTitle>
            </CardHeader>
            <CardContent>
              <ol class="space-y-2 text-sm text-muted-foreground">
                <li>1. Click on characters to add sounds</li>
                <li>2. Mix different beats to create music</li>
                <li>3. Experiment with combinations</li>
                <li>4. Have fun creating!</li>
              </ol>
            </CardContent>
          </Card>
        </div>
      </div>

      <!-- Game Features Section -->
      <section class="mt-16">
        <div class="text-center mb-12">
          <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
            <span class="text-purple-600">‚ú®</span>
            Game Features
          </h2>
          <p class="text-xl text-gray-600 max-w-2xl mx-auto">
            Discover what makes this game special
          </p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {(game.data.features || defaultFeatures).map((feature: any) => (
            <Card class="h-full hover:shadow-lg transition-shadow duration-300">
              <CardContent class="p-6 text-center">
                <div class="text-4xl mb-4">{typeof feature === 'string' ? 'üéµ' : feature.icon}</div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">
                  {typeof feature === 'string' ? feature : feature.title}
                </h3>
                {typeof feature !== 'string' && feature.description && (
                  <p class="text-gray-600 text-sm">{feature.description}</p>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      </section>

      <!-- How to Play Section (Detailed) -->
      <section class="mt-16">
        <div class="text-center mb-12">
          <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
            <span class="text-purple-600">üéÆ</span>
            How to Play
          </h2>
          <p class="text-xl text-gray-600 max-w-2xl mx-auto">
            Master the art of music creation
          </p>
        </div>

        <Card class="max-w-4xl mx-auto">
          <CardContent class="p-8">
            <div class="space-y-6">
              {(game.data.howToPlay || defaultSteps).map((step: any, index: number) => (
                <div class="flex gap-6 items-start">
                  <div class="flex-shrink-0 w-12 h-12 bg-purple-600 text-white rounded-full flex items-center justify-center font-bold text-lg">
                    {index + 1}
                  </div>
                  <div class="flex-grow pt-2">
                    <p class="text-gray-700 text-lg">{typeof step === 'string' ? step : step.title || step.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </section>

      <!-- Game Screenshots Section (if available) -->
      {game.data.screenshots && game.data.screenshots.length > 0 && (
        <section class="mt-16">
          <div class="text-center mb-12">
            <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
              <span class="text-purple-600">üì∏</span>
              Game Screenshots
            </h2>
            <p class="text-xl text-gray-600 max-w-2xl mx-auto">
              Take a look at the gameplay experience
            </p>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
            {game.data.screenshots.map((screenshot: any, index: number) => (
              <Card class="overflow-hidden hover:shadow-xl transition-all duration-300 group">
                <CardContent class="p-0">
                  <div class="relative aspect-video overflow-hidden">
                    <img
                      src={typeof screenshot === 'string' ? screenshot : screenshot.url}
                      alt={`${metadata.title} screenshot ${index + 1}`}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                    <div class="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>
      )}

      <!-- Audio Preview Section (if exists) -->
      {game.data.audio && (
        <section class="mt-16">
          <div class="text-center mb-12">
            <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
              <span class="text-purple-600">üéµ</span>
              Game Music Preview
            </h2>
            <p class="text-xl text-gray-600 max-w-2xl mx-auto">
              Experience the immersive soundtrack
            </p>
          </div>

          <div class="max-w-2xl mx-auto">
            <AudioPlayer
              src={game.data.audio}
              title={`${metadata.title} - Game Music`}
            />
          </div>
        </section>
      )}

      <!-- Detailed Content Section -->
      {hasContent && (
        <section class="mt-16">
          <Card class="max-w-4xl mx-auto shadow-lg">
            <CardHeader class="bg-gradient-to-r from-purple-50 to-pink-50 border-b">
              <div class="flex items-center gap-4">
                <div class="text-purple-600 text-3xl">üìñ</div>
                <CardTitle class="text-3xl text-gray-900">About {metadata.title}</CardTitle>
              </div>
              <div class="flex items-center gap-2 mt-4">
                <Badge variant="secondary" class="bg-purple-100 text-purple-700 hover:bg-purple-200">
                  {game.data.category}
                </Badge>
                {game.data.rating && (
                  <div class="flex items-center gap-1 text-yellow-500">
                    <GameRating rating={game.data.rating} />
                  </div>
                )}
              </div>
            </CardHeader>
            <CardContent class="prose prose-lg max-w-none p-8">
              <!-- Markdown content would go here if available -->
              <div set:html={hasContent ? game.body : metadata.description} />
            </CardContent>
          </Card>
        </section>
      )}
    </div>

    <!-- Related Games -->
    {relatedGames.length > 0 && (
      <section class="py-16 bg-gradient-to-b from-gray-50 to-white">
        <div class="container mx-auto px-4">
          <div class="text-center mb-12">
            <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
              <span class="text-purple-600">üéØ</span>
              More Games Like This
            </h2>
            <p class="text-xl text-gray-600">
              Continue your musical journey with these similar games
            </p>
          </div>
          <GameGrid games={relatedGames} locale={locale} />
        </div>
      </section>
    )}
  </main>

  <Footer />
</BaseLayout>

<style>
  .game-iframe-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 0.5rem;
  }

  .game-iframe-container iframe {
    border: none;
  }

  /* Prose styling for markdown content */
  .prose :global(ul) {
    @apply list-none p-0 my-6 flex flex-col gap-3;
  }

  .prose :global(ul li) {
    @apply relative pl-8;
  }

  .prose :global(ul li::before) {
    @apply absolute left-0 top-2 w-5 h-5 bg-purple-600 rounded-full flex items-center justify-center text-white text-xs;
    content: "‚úì";
  }

  .prose :global(h2) {
    @apply text-3xl font-bold text-gray-900 mt-8 mb-4 flex items-center gap-3;
  }

  .prose :global(h3) {
    @apply text-xl font-semibold text-gray-800 mt-6 mb-3;
  }

  .prose :global(p) {
    @apply text-gray-700 leading-relaxed mb-4;
  }

  .prose :global(a) {
    @apply text-purple-600 hover:text-purple-700 underline;
  }

  .prose :global(strong) {
    @apply font-bold text-gray-900;
  }

  /* Feature cards animation */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  section {
    animation: fadeInUp 0.6s ease-out;
  }
</style>
