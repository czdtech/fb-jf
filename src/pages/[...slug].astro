---
import { getCollection, type CollectionEntry } from 'astro:content';
import { render } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro'
import Navigation from '@/components/Navigation.astro'
import Footer from '@/components/Footer.astro'
import GameRating from '@/components/GameRating.astro'
import GameHero from '@/components/GameHero.astro'
import GameGrid from '@/components/GameGrid.astro'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import AudioPlayer from '@/components/audio/AudioPlayer.astro'

// 导入数据和工具
import extractedData from '@/data/extracted-data.json'
import { generateGameHreflangLinks } from '@/utils/hreflang'
import { generateAllLocalesGamePaths, getLocalizedGameContent, extractLocaleFromPath } from '@/utils/i18n'
import { extractBaseSlug, getGameLocalizedPath } from '@/utils/url-service'
import { getTranslation, SUPPORTED_LOCALES } from '@/i18n/utils'
import type { ExtractedData } from '@/types/game'
import UrlService from '@/utils/url-service'

const { navigation } = extractedData as ExtractedData

// 基础站点域名（统一 canonical 基准域，去除末尾斜杠）
// Astro.site 会根据环境自动返回正确的 URL (dev/prod)
const SITE_URL = Astro.site.toString().replace(/\/$/, '');

export async function getStaticPaths() {
  console.log('🔍 [...slug].astro getStaticPaths() called...');
  
  const allGames = await getCollection('games');
  const paths: Array<{
    params: { slug: string };
    props: { game: CollectionEntry<'games'>; locale: string };
  }> = [];

  // 获取所有英文游戏作为基础
  const englishGames = allGames.filter(game => {
    const gameId = game.id.replace(/\.md$/, '');
    // 英文游戏：文件在根目录，不在语言子目录中
    return !gameId.includes('/');
  });

  console.log(`📊 Found ${englishGames.length} English games`);

  // 为每个英文游戏生成所有语言的路径
  for (const englishGame of englishGames) {
    const baseSlug = englishGame.data.slug || englishGame.id.replace(/\.md$/, '');
    
    // 为每种语言生成路径
    for (const locale of SUPPORTED_LOCALES) {
      let gameToUse = englishGame;
      
      // 如果不是英文，尝试找到对应的本地化版本
      if (locale !== 'en') {
        const englishFileName = englishGame.id.replace(/\.md$/, '');
        const localizedGame = allGames.find(game => {
          const gameId = game.id.replace(/\.md$/, '');
          // 检查是否是对应语言目录下的同名文件
          return gameId === `${locale}/${englishFileName}`;
        });
        
        if (localizedGame) {
          gameToUse = localizedGame;
        }
      }

      // 构建路径：英文为基础slug，其他语言为 {locale}/{baseSlug}
      const urlPath = locale === 'en' ? baseSlug : `${locale}/${baseSlug}`;

      paths.push({
        params: { slug: urlPath },
        props: { game: gameToUse, locale }
      });
    }
  }

  // 过滤掉一些静态页面，避免冲突
  const staticPages = ['privacy', 'terms-of-service', '404', 'index', 'games'];
  const filteredPaths = paths.filter(p => {
    const slug = p.params.slug;
    return !staticPages.some(page => slug === page || slug.endsWith(`/${page}`));
  });

  console.log(`📊 Generated ${filteredPaths.length} total game paths`);
  
  // Debug: show a few Chinese paths
  const chinesePaths = filteredPaths.filter(p => p.params.slug.startsWith('zh/'));
  console.log(`📊 Chinese paths: ${chinesePaths.length}`);
  chinesePaths.slice(0, 3).forEach((path, i) => {
    console.log(`  ${i + 1}. ${path.params.slug} → ${path.props.game.id} (${path.props.locale})`);
  });

  return filteredPaths;
}

// 从URL参数获取完整slug和解析语言
const fullSlug = Astro.params.slug as string;
const urlSegments = fullSlug.split('/');

// 确定当前语言和基础slug
let currentLocale: string;
let baseSlug: string;

if (SUPPORTED_LOCALES.includes(urlSegments[0]) && urlSegments[0] !== 'en') {
  // 路径格式：zh/sprunki-retake
  currentLocale = urlSegments[0];
  baseSlug = urlSegments.slice(1).join('/');
} else {
  // 路径格式：sprunki-retake (英文)
  currentLocale = 'en';
  baseSlug = fullSlug;
}

// 优先使用 Astro.currentLocale（与 Astro i18n 对齐）
currentLocale = Astro.currentLocale || currentLocale;

console.log(`🔍 Processing fullSlug: ${fullSlug}, locale: ${currentLocale}, baseSlug: ${baseSlug}`);

// 获取游戏数据
const { game: initialGame, locale: propsLocale } = Astro.props as { 
  game: CollectionEntry<'games'>; 
  locale: string 
};

let game = initialGame;

// 如果有必要，重新加载正确的游戏内容
if (propsLocale !== currentLocale) {
  try {
    const localizedGame = await getLocalizedGameContent(baseSlug, currentLocale);
    if (localizedGame) {
      game = localizedGame;
    }
  } catch (error) {
    console.error(`❌ Error loading game content for ${baseSlug} in ${currentLocale}:`, error);
  }
}

if (!game) {
  throw new Error(`Game not found: ${baseSlug} for locale ${currentLocale}`);
}

console.log(`✅ Game loaded: ${game.id} for ${currentLocale}`);

const { Content } = await render(game);
const gameData = { ...(game.data), slug: game.data.slug || baseSlug };
const extendedData = gameData;

// 获取当前语言的翻译内容
const translation = await getTranslation(currentLocale);
const gameTexts = translation.ui?.game || {};

// Fetch and prepare related games - 优先显示当前语言的游戏
const allGames = await getCollection('games');
const relatedGames = allGames
  .filter((g: CollectionEntry<'games'>) => {
    // 同类别且非当前游戏
    if (g.data.category !== gameData.category || g.id === game.id) {
      return false;
    }
    
    // 根据当前语言过滤相关游戏
    const gameId = g.id.replace(/\.md$/, '');
    if (currentLocale === 'en') {
      // 英文游戏: 文件在根目录
      return !gameId.includes('/');
    } else {
      // 其他语言游戏: 文件在对应语言目录
      return gameId.startsWith(`${currentLocale}/`);
    }
  })
  .slice(0, 4)
  .map((g: CollectionEntry<'games'>) => {
    // 使用UrlService标准化游戏数据
    const normalizedData = UrlService.normalizeGameData(g);
    return {
      ...g.data,
      slug: normalizedData.baseSlug,
    };
  });

// 统一的hreflang生成 - 仅为存在翻译的语言生成链接
const hreflangLinks = await generateGameHreflangLinks(navigation?.languages || [], baseSlug)

// 规范化 ogImage（确保绝对URL）
const rawOgImage = extendedData.seo?.ogImage || gameData.meta?.ogImage || gameData.image || '/tw.jpg'
const normalizedOgImage = rawOgImage?.startsWith('http') ? rawOgImage : `${SITE_URL}${rawOgImage.startsWith('/') ? '' : '/'}${rawOgImage}`

// SEO配置 - 多语言支持的 canonical URL
const canonicalPath = getGameLocalizedPath(baseSlug, currentLocale);
const meta = {
  title: extendedData.seo?.title || gameData.meta?.title || `${gameData.title} - Play ${gameData.title} Online | FiddleBops`,
  description: extendedData.seo?.description || gameData.meta?.description || `Play ${gameData.title} online for free! ${gameData.description || 'Experience this amazing music creation game.'}`,
  keywords: extendedData.seo?.keywords || gameData.title,
  canonical: `${SITE_URL}${canonicalPath}`,
  ogImage: normalizedOgImage,
}

// 增强的结构化数据（@graph：VideoGame/SoftwareApplication + BreadcrumbList）
const gameTypeNode = {
  '@type': 'VideoGame',
  name: gameData.title,
  description: meta.description,
  url: meta.canonical,
  image: gameData.image ? (gameData.image.startsWith('http') ? gameData.image : `${SITE_URL}${gameData.image}`) : undefined,
  screenshot: gameData.image ? (gameData.image.startsWith('http') ? gameData.image : `${SITE_URL}${gameData.image}`) : undefined,
  genre: gameData.category ? [String(gameData.category)] : undefined,
  applicationCategory: 'Game',
  operatingSystem: 'Web',
  ...(extendedData.rating && {
    aggregateRating: {
      '@type': 'AggregateRating',
      ratingValue: extendedData.rating.score,
      bestRating: extendedData.rating.maxScore,
      ratingCount: extendedData.rating.votes,
    },
  }),
  potentialAction: gameData.iframe
    ? {
        '@type': 'PlayAction',
        target: gameData.iframe,
      }
    : undefined,
};

// 若缺关键字段时退化为 SoftwareApplication（保底）
if (!gameData.image && gameTypeNode['@type'] === 'VideoGame') {
  gameTypeNode['@type'] = 'SoftwareApplication';
}

const breadcrumbNode = {
  '@type': 'BreadcrumbList',
  itemListElement: [
    {
      '@type': 'ListItem',
      position: 1,
      name: 'Home',
      item: `${SITE_URL}/`,
    },
    {
      '@type': 'ListItem',
      position: 2,
      name: 'Games',
      item: `${SITE_URL}/games/`,
    },
    {
      '@type': 'ListItem',
      position: 3,
      name: gameData.title,
      item: meta.canonical,
    },
  ],
};

const structuredData = {
  '@context': 'https://schema.org',
  '@graph': [
    gameTypeNode,
    breadcrumbNode,
    ...(extendedData.seo?.schema ? [extendedData.seo.schema] : []),
  ],
};

// 默认游戏特色
const defaultFeatures = [
  { icon: '🎵', title: 'Rich Music Creation', description: 'Create unique musical compositions with diverse sound elements' },
  { icon: '🎭', title: 'Character Variety', description: 'Choose from a wide range of animated characters, each with unique sounds' },
  { icon: '🔄', title: 'Creative Freedom', description: 'Unlimited possibilities for mixing and matching sounds' },
  { icon: '💫', title: 'Visual Effects', description: 'Stunning animations and effects that react to your music' }
];

// 默认游戏步骤
const defaultSteps = [
  'Choose your favorite characters from the selection',
  'Drag and drop them onto the stage to start creating',
  'Experiment with different combinations to find your perfect mix',
  'Save and share your musical masterpiece with friends'
];
---

<BaseLayout
  meta={meta}
  hreflang={hreflangLinks}
  structuredData={structuredData}
>
  <Navigation
    navigation={navigation.main}
    languages={navigation.languages}
    currentLang={currentLocale}
    currentPath={canonicalPath}
  />

  <!-- 游戏Hero区域 -->
  <GameHero
    game={gameData}
    rating={extendedData.rating}
    pageType={extendedData.pageType}
  />

  <main class="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50">
    <div class="responsive-container container-standard py-12">

      <!-- 游戏特色区域 -->
      <section class="mb-16">
        <div class="text-center mb-12">
          <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
            <span class="text-purple-600">✨</span>
            {gameTexts.sections?.features || 'Game Features'}
          </h2>
          <p class="text-xl text-gray-600 max-w-2xl mx-auto">
            {gameTexts.features?.defaultDescription || 'Discover what makes this game special'}
          </p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {(extendedData.features || gameTexts.features?.defaults || defaultFeatures).map((feature: any, index: number) => (
            <Card className="h-full hover:shadow-lg transition-shadow duration-300">
              <CardContent className="p-6 text-center">
                <div class="text-4xl mb-4">{typeof feature === 'string' ? '🎵' : feature.icon}</div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">
                  {typeof feature === 'string' ? feature : feature.title}
                </h3>
                {typeof feature !== 'string' && feature.description && (
                  <p class="text-gray-600 text-sm">{feature.description}</p>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      </section>

      <!-- 游戏玩法区域 -->
      <section class="mb-16">
        <div class="text-center mb-12">
          <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
            <span class="text-purple-600">🎮</span>
            {gameTexts.sections?.howToPlay || 'How to Play'}
          </h2>
          <p class="text-xl text-gray-600 max-w-2xl mx-auto">
            {gameTexts.howToPlay?.defaultTitle || 'Master the art of music creation'}
          </p>
        </div>

        <Card className="max-w-4xl mx-auto">
          <CardContent className="p-8">
            <div class="space-y-6">
              {(extendedData.howToPlay || gameTexts.howToPlay?.defaults || defaultSteps).map((step: any, index: number) => (
                <div class="flex gap-6 items-start">
                  <div class="flex-shrink-0 w-12 h-12 bg-purple-600 text-white rounded-full flex items-center justify-center font-bold text-lg">
                    {index + 1}
                  </div>
                  <div class="flex-grow pt-2">
                    <p class="text-gray-700 text-lg">{typeof step === 'string' ? step : step.title || step.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </section>

      <!-- 游戏截图/媒体预览区域 -->
      {(extendedData.screenshots || extendedData.gallery) && (
        <section class="mb-16">
          <div class="text-center mb-12">
            <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
              <span class="text-purple-600">📸</span>
              {gameTexts.sections?.screenshots || 'Game Screenshots'}
            </h2>
            <p class="text-xl text-gray-600 max-w-2xl mx-auto">
              {gameTexts.media?.screenshotsTitle || 'Take a look at the gameplay experience'}
            </p>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
            {(extendedData.screenshots || extendedData.gallery || [gameData.image]).map((screenshot: any, index: number) => (
              <Card className="overflow-hidden hover:shadow-xl transition-all duration-300 group">
                <CardContent className="p-0">
                  <div class="relative aspect-video overflow-hidden">
                    <img
                      src={typeof screenshot === 'string' ? screenshot : screenshot.url || gameData.image}
                      alt={`${gameData.title} screenshot ${index + 1}`}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                    <div class="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div class="absolute bottom-4 left-4 right-4 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <p class="text-sm font-medium">
                        {typeof screenshot === 'object' && screenshot.caption
                          ? screenshot.caption
                          : `${gameData.title} - Screenshot ${index + 1}`
                        }
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>
      )}
      {extendedData.audio && (
        <section class="mb-16">
          <div class="text-center mb-12">
            <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
              <span class="text-purple-600">🎵</span>
              {gameTexts.media?.musicPreviewTitle || 'Game Music Preview'}
            </h2>
            <p class="text-xl text-gray-600 max-w-2xl mx-auto">
              {gameTexts.media?.musicPreviewDescription || 'Experience the immersive soundtrack'}
            </p>
          </div>

          <div class="max-w-2xl mx-auto">
            <AudioPlayer
              audioSrc={extendedData.audio}
              title={`${gameData.title} - Game Music`}
              className="shadow-lg"
            />
          </div>
        </section>
      )}

      <!-- 详细内容区域 -->
      <section class="mb-16">
        <Card className="max-w-4xl mx-auto shadow-lg">
          <CardHeader className="bg-gradient-to-r from-purple-50 to-pink-50 border-b">
            <div class="flex items-center gap-4">
              <div class="text-purple-600 text-3xl">📖</div>
              <CardTitle className="text-3xl text-gray-900">{gameTexts.sections?.about?.replace('{title}', gameData.title) || `About ${gameData.title}`}</CardTitle>
            </div>
            <div class="flex items-center gap-2 mt-4">
              <Badge variant="secondary" className="bg-purple-100 text-purple-700 hover:bg-purple-200">
                {gameData.category}
              </Badge>
              {extendedData.rating && (
                <div class="flex items-center gap-1 text-yellow-500">
                  {Array.from({ length: 5 }, (_, i) => (
                    <span class={`text-lg ${i < Math.floor(extendedData.rating.score) ? 'text-yellow-400' : 'text-gray-300'}`}>
                      ⭐
                    </span>
                  ))}
                  <span class="text-sm text-gray-600 ml-2">({extendedData.rating.votes} reviews)</span>
                </div>
              )}
            </div>
          </CardHeader>
          <CardContent className="prose prose-lg max-w-none p-8">
            <Content />
          </CardContent>
        </Card>
      </section>

      <!-- 相关游戏区域 -->
      {relatedGames.length > 0 && (
        <section>
          <div class="text-center mb-12">
            <h2 class="text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center gap-4">
              <span class="text-purple-600">🎯</span>
              {gameTexts.sections?.relatedGames || 'More Games Like This'}
            </h2>
            <p class="text-xl text-gray-600">
              {gameTexts.navigation?.continueJourney || 'Continue your musical journey'}
            </p>
          </div>

          <GameGrid games={relatedGames} variant="featured" showTitle={false} />
        </section>
      )}
    </div>
  </main>

  <Footer />
</BaseLayout>

<style>
  /* Prose styling for markdown content */
  .prose :global(ul) {
    @apply list-none p-0 my-6 flex flex-col gap-3;
  }

  .prose :global(ul li) {
    @apply bg-gradient-to-r from-purple-50 to-white border border-purple-200 rounded-lg p-4 transition-all duration-300 hover:shadow-md hover:border-purple-300 hover:bg-gradient-to-r hover:from-purple-100 hover:to-white;
  }

  .prose :global(strong) {
    @apply font-bold text-purple-700 bg-purple-50 px-2 py-1 rounded border border-purple-200;
  }

  .prose :global(h2) {
    @apply text-2xl font-bold text-gray-900 my-6 flex items-center border-l-4 border-purple-600 pl-4;
  }

  .prose :global(p) {
    @apply mb-4 text-gray-700 text-lg leading-relaxed;
  }

  .prose :global(p:first-of-type) {
    @apply text-xl font-medium text-gray-800;
  }

  .prose :global(h3) {
    @apply text-xl font-semibold text-gray-800 mt-6 mb-3;
  }

  .prose :global(h4) {
    @apply text-lg font-medium text-gray-800 mt-4 mb-2;
  }

  .prose :global(blockquote) {
    @apply border-l-4 border-blue-500 bg-blue-50 p-4 my-6 rounded-r-lg italic text-gray-700;
  }

  .prose :global(code) {
    @apply bg-gray-100 text-gray-800 px-2 py-1 rounded font-mono text-sm;
  }

  .prose :global(pre) {
    @apply bg-gray-900 text-gray-100 p-6 rounded-lg overflow-x-auto my-6;
  }

  .prose :global(pre code) {
    @apply bg-transparent p-0 text-gray-100;
  }
</style>