---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro'
import Navigation from '@/components/Navigation.astro'
import Footer from '@/components/Footer.astro'
import GameRating from '@/components/GameRating.astro'
import GameHero from '@/components/GameHero.astro'
import GameGrid from '@/components/GameGrid.astro'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import AudioPlayer from '@/components/audio/AudioPlayer.astro'

// Import utilities
import extractedData from '@/data/extracted-data.json'
import { generateGameHreflangLinks } from '@/utils/hreflang'
import { getTranslation, SUPPORTED_LOCALES } from '@/i18n/utils'
import {
  getGameMetadata,
  generateGamePaths,
  getRelatedGames,
  buildGameStructuredData
} from '@/utils/game-helpers'
import type { ExtractedData } from '@/types/game'

const { navigation } = extractedData as ExtractedData
const SITE_URL = Astro.site.toString().replace(/\/$/, '');

export async function getStaticPaths() {
  console.log('üîç [...slug].astro getStaticPaths() called...');

  const allGames = await getCollection('games');
  const paths: Array<{
    params: { slug: string };
    props: { game: CollectionEntry<'games'>; locale: string };
  }> = [];

  // Get English games as base
  const englishGames = allGames.filter(game => {
    const gameId = game.id.replace(/\.md$/, '');
    const isRootGame = !gameId.includes('/');
    const hasLanguagePrefix = /^(zh|es|fr|de|ja|ko)-/.test(gameId);
    return isRootGame && !hasLanguagePrefix;
  });

  console.log(`üìä Found ${englishGames.length} English games`);

  // Generate paths for all locales
  for (const game of englishGames) {
    const baseSlug = game.data.slug || game.id.replace(/\.md$/, '');
    const gamePaths = generateGamePaths(baseSlug);

    for (const { locale, slug } of gamePaths) {
      paths.push({
        params: { slug },
        props: { game, locale }
      });
    }
  }

  console.log(`‚úÖ Generated ${paths.length} paths`);
  return paths;
}

const { slug } = Astro.params;
const { game, locale } = Astro.props;

// Get localized metadata
const metadata = getGameMetadata(game, locale);
const translation = await getTranslation(locale);
const uiText = translation.ui;

// Get all games for related section
const allGames = await getCollection('games');
const relatedGames = await getRelatedGames(game, allGames, locale);

// Generate URLs
const canonicalUrl = locale === 'en'
  ? `${SITE_URL}/${game.data.slug}/`
  : `${SITE_URL}/${locale}/${game.data.slug}/`;

// Generate hreflang links
const hreflangLinks = await generateGameHreflangLinks(
  SUPPORTED_LOCALES.map(code => ({ code, label: '' })),
  game.data.slug,
  SITE_URL
);

// Build structured data
const structuredData = buildGameStructuredData(game, locale, SITE_URL);

// Page meta
const pageMeta = {
  title: metadata.meta?.title || metadata.title,
  description: metadata.meta?.description || metadata.description,
  keywords: metadata.keywords,
  canonical: canonicalUrl,
  ogImage: `${SITE_URL}/${game.data.image}`
};

// Render markdown content (if any)
const hasContent = game.body && game.body.trim().length > 0;
---

<BaseLayout
  meta={pageMeta}
  lang={locale}
  hreflang={hreflangLinks}
  structuredData={structuredData}
>
  <Navigation
    locale={locale}
    currentPath={`/${slug}/`}
  />

  <main id="main-content" class="min-h-screen" role="main">
    <!-- Game Hero Section -->
    <GameHero
      game={game}
      locale={locale}
      title={metadata.title}
      description={metadata.description}
    />

    <!-- Main Game Container -->
    <div class="container mx-auto px-4 py-8">
      <div class="grid lg:grid-cols-3 gap-8">
        <!-- Game Iframe -->
        <div class="lg:col-span-2">
          <Card class="overflow-hidden">
            <CardContent class="p-0">
              <div class="game-iframe-container relative w-full" style="padding-bottom: 56.25%;">
                <iframe
                  src={game.data.iframe}
                  class="absolute top-0 left-0 w-full h-full rounded-lg"
                  title={metadata.title}
                  frameborder="0"
                  allowfullscreen
                  loading="lazy"
                ></iframe>
              </div>
            </CardContent>
          </Card>

          <!-- Game Description -->
          <Card class="mt-6">
            <CardHeader>
              <CardTitle class="text-2xl">
                {uiText?.game?.about || 'About this game'}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p class="text-muted-foreground leading-relaxed">
                {metadata.description}
              </p>

            </CardContent>
          </Card>
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1 space-y-6">
          <!-- Game Info Card -->
          <Card>
            <CardHeader>
              <CardTitle>{uiText?.game?.info || 'Game Info'}</CardTitle>
            </CardHeader>
            <CardContent class="space-y-4">
              <div>
                <h4 class="font-semibold mb-2">{uiText?.game?.category || 'Category'}</h4>
                <Badge variant="secondary" class="capitalize">
                  {game.data.category}
                </Badge>
              </div>

              {game.data.rating && (
                <div>
                  <h4 class="font-semibold mb-2">{uiText?.game?.rating || 'Rating'}</h4>
                  <GameRating rating={game.data.rating} />
                </div>
              )}

              {game.data.features && (
                <div>
                  <h4 class="font-semibold mb-2">{uiText?.game?.features || 'Features'}</h4>
                  <ul class="space-y-1 text-sm text-muted-foreground">
                    {game.data.features.map((feature: string) => (
                      <li class="flex items-start">
                        <span class="mr-2">‚Ä¢</span>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </CardContent>
          </Card>

          <!-- Audio Player if exists -->
          {game.data.audio && (
            <Card>
              <CardHeader>
                <CardTitle>{uiText?.game?.soundtrack || 'Soundtrack'}</CardTitle>
              </CardHeader>
              <CardContent>
                <AudioPlayer
                  src={game.data.audio}
                  title={metadata.title}
                />
              </CardContent>
            </Card>
          )}

          <!-- How to Play -->
          <Card>
            <CardHeader>
              <CardTitle>{uiText?.game?.howToPlay || 'How to Play'}</CardTitle>
            </CardHeader>
            <CardContent>
              <ol class="space-y-2 text-sm text-muted-foreground">
                <li>1. {uiText?.game?.step1 || 'Click on characters to add sounds'}</li>
                <li>2. {uiText?.game?.step2 || 'Mix different beats to create music'}</li>
                <li>3. {uiText?.game?.step3 || 'Experiment with combinations'}</li>
                <li>4. {uiText?.game?.step4 || 'Have fun creating!'}</li>
              </ol>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>

    <!-- Related Games -->
    {relatedGames.length > 0 && (
      <section class="py-12 bg-muted/50">
        <div class="container mx-auto px-4">
          <h2 class="text-3xl font-bold mb-8 text-center">
            {uiText?.game?.related || 'Related Games'}
          </h2>
          <GameGrid games={relatedGames} locale={locale} />
        </div>
      </section>
    )}
  </main>

  <Footer />
</BaseLayout>

<style>
  .game-iframe-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 0.5rem;
  }

  .game-iframe-container iframe {
    border: none;
  }
</style>
