---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
---

<BaseLayout title="Browser Compatibility Suite">
  <main class="min-h-screen bg-background">
    <div class="responsive-container py-8 space-y-8">
      
      <!-- Header -->
      <div class="text-center space-y-4">
        <h1 class="text-4xl font-bold text-primary">Browser Compatibility Validation Suite</h1>
        <p class="text-xl text-muted-foreground max-w-3xl mx-auto">
          Advanced browser feature detection and compatibility testing for modern web technologies.
        </p>
      </div>

      <!-- Quick Browser Info -->
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-2xl text-primary">Browser Quick Info</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" id="quick-info">
            <!-- Will be populated by JavaScript -->
          </div>
        </CardContent>
      </Card>

      <!-- Core Web Technologies -->
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-2xl text-primary">Core Web Technologies Support</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="space-y-6">
            
            <!-- HTML5 Features -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">HTML5 Features</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3" id="html5-features">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

            <!-- CSS3 Features -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">CSS3 Features</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3" id="css3-features">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

            <!-- JavaScript ES6+ Features -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">JavaScript ES6+ Features</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3" id="es6-features">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

          </div>
        </CardContent>
      </Card>

      <!-- Modern Web APIs -->
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-2xl text-primary">Modern Web APIs</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="space-y-6">
            
            <!-- Storage APIs -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">Storage APIs</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3" id="storage-apis">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

            <!-- Media APIs -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">Media APIs</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3" id="media-apis">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

            <!-- Performance APIs -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">Performance APIs</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3" id="performance-apis">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

            <!-- Network APIs -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">Network APIs</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3" id="network-apis">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

          </div>
        </CardContent>
      </Card>

      <!-- CSS Feature Detection Tests -->
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-2xl text-primary">CSS Feature Detection & Tests</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="space-y-6">
            
            <!-- Layout Features -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">Layout Features</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                
                <!-- Grid Test -->
                <div class="space-y-3">
                  <h4 class="font-medium">CSS Grid</h4>
                  <div class="css-grid-support-test bg-muted p-3 rounded">
                    <div class="grid grid-cols-2 gap-2">
                      <div class="bg-primary/20 p-2 rounded text-xs text-center">1</div>
                      <div class="bg-primary/40 p-2 rounded text-xs text-center">2</div>
                      <div class="bg-primary/60 p-2 rounded text-xs text-center col-span-2">3</div>
                    </div>
                  </div>
                  <div id="grid-support" class="text-xs text-muted-foreground">Testing...</div>
                </div>

                <!-- Flexbox Test -->
                <div class="space-y-3">
                  <h4 class="font-medium">Flexbox</h4>
                  <div class="css-flexbox-support-test bg-muted p-3 rounded">
                    <div class="flex justify-between items-center gap-2">
                      <div class="bg-primary/30 px-2 py-1 rounded text-xs">Start</div>
                      <div class="bg-primary/50 px-2 py-1 rounded text-xs flex-1 text-center">Center</div>
                      <div class="bg-primary/70 px-2 py-1 rounded text-xs">End</div>
                    </div>
                  </div>
                  <div id="flexbox-support" class="text-xs text-muted-foreground">Testing...</div>
                </div>

                <!-- Container Queries Test -->
                <div class="space-y-3">
                  <h4 class="font-medium">Container Queries</h4>
                  <div class="css-container-support-test bg-muted p-3 rounded">
                    <div class="container-query-test border border-primary/30 p-2 rounded">
                      <div class="text-xs text-center">Resize me</div>
                    </div>
                  </div>
                  <div id="container-support" class="text-xs text-muted-foreground">Testing...</div>
                </div>

              </div>
            </div>

            <!-- Visual Features -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">Visual Features</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                
                <!-- Custom Properties -->
                <div class="space-y-3">
                  <h4 class="font-medium">CSS Variables</h4>
                  <div class="css-variables-test bg-muted p-3 rounded text-center">
                    <div class="variable-test-element w-8 h-8 mx-auto rounded" style="--test-color: #a855f7; background: var(--test-color, red);"></div>
                  </div>
                  <div id="variables-support" class="text-xs text-muted-foreground">Testing...</div>
                </div>

                <!-- Backdrop Filter -->
                <div class="space-y-3">
                  <h4 class="font-medium">Backdrop Filter</h4>
                  <div class="backdrop-test bg-gradient-to-r from-purple-500 to-pink-500 p-3 rounded relative">
                    <div class="backdrop-blur-sm bg-white/20 p-2 rounded text-center text-white text-xs">Blurred</div>
                  </div>
                  <div id="backdrop-support" class="text-xs text-muted-foreground">Testing...</div>
                </div>

                <!-- Clip Path -->
                <div class="space-y-3">
                  <h4 class="font-medium">Clip Path</h4>
                  <div class="clip-path-test bg-muted p-3 rounded flex justify-center">
                    <div class="w-12 h-12 bg-primary" style="clip-path: polygon(50% 0%, 0% 100%, 100% 100%);"></div>
                  </div>
                  <div id="clippath-support" class="text-xs text-muted-foreground">Testing...</div>
                </div>

                <!-- Mask -->
                <div class="space-y-3">
                  <h4 class="font-medium">CSS Mask</h4>
                  <div class="mask-test bg-muted p-3 rounded flex justify-center">
                    <div class="w-12 h-12 bg-primary mask-gradient"></div>
                  </div>
                  <div id="mask-support" class="text-xs text-muted-foreground">Testing...</div>
                </div>

              </div>
            </div>

          </div>
        </CardContent>
      </Card>

      <!-- Browser Quirks & Known Issues -->
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-2xl text-primary">Browser-Specific Issues & Workarounds</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="space-y-6">
            
            <div id="browser-quirks" class="space-y-4">
              <!-- Will be populated based on detected browser -->
            </div>

            <!-- Polyfill Recommendations -->
            <div class="space-y-3">
              <h3 class="text-lg font-semibold">Recommended Polyfills</h3>
              <div id="polyfill-recommendations" class="space-y-2">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

          </div>
        </CardContent>
      </Card>

      <!-- Feature Support Matrix -->
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-2xl text-primary">Cross-Browser Feature Support Matrix</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="overflow-x-auto">
            <table class="w-full text-sm">
              <thead>
                <tr class="border-b">
                  <th class="text-left p-2">Feature</th>
                  <th class="text-center p-2">Chrome</th>
                  <th class="text-center p-2">Firefox</th>
                  <th class="text-center p-2">Safari</th>
                  <th class="text-center p-2">Edge</th>
                  <th class="text-center p-2">Current</th>
                </tr>
              </thead>
              <tbody id="feature-matrix">
                <!-- Will be populated by JavaScript -->
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      <!-- Test Actions -->
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-2xl text-primary">Compatibility Test Actions</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="space-y-6">
            
            <div class="flex flex-wrap gap-4">
              <Button id="run-comprehensive-test" variant="default">Run Comprehensive Test</Button>
              <Button id="test-performance" variant="outline">Test Performance</Button>
              <Button id="generate-compatibility-report" variant="ghost">Generate Report</Button>
              <Button id="export-polyfill-config" variant="secondary">Export Polyfill Config</Button>
            </div>

            <!-- Test Results -->
            <div id="test-output" class="bg-muted p-4 rounded-lg min-h-[200px] overflow-auto">
              <div class="text-muted-foreground">Test output will appear here...</div>
            </div>

            <!-- Progress Bar -->
            <div class="space-y-2">
              <div class="flex justify-between text-sm">
                <span>Test Progress</span>
                <span id="test-progress-text">Ready</span>
              </div>
              <div class="w-full bg-muted rounded-full h-2">
                <div id="test-progress-bar" class="bg-primary h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
              </div>
            </div>

          </div>
        </CardContent>
      </Card>

    </div>
  </main>
</BaseLayout>

<style>
  /* Test specific styles */
  .container-query-test {
    container-type: inline-size;
  }

  @container (max-width: 150px) {
    .container-query-test .text-xs {
      color: green;
      font-weight: bold;
    }
  }

  .mask-gradient {
    mask: linear-gradient(45deg, transparent 30%, black 70%);
    -webkit-mask: linear-gradient(45deg, transparent 30%, black 70%);
  }

  /* Feature support indicators */
  .feature-supported {
    @apply bg-green-100 text-green-800 border-green-200;
  }

  .feature-not-supported {
    @apply bg-red-100 text-red-800 border-red-200;
  }

  .feature-partial {
    @apply bg-yellow-100 text-yellow-800 border-yellow-200;
  }

  .feature-unknown {
    @apply bg-gray-100 text-gray-800 border-gray-200;
  }

  /* Animation for testing */
  .feature-item {
    transition: all 0.2s ease;
  }

  .feature-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
</style>

<script>
  class BrowserCompatibilityValidator {
    constructor() {
      this.features = {};
      this.browserInfo = {};
      this.testResults = [];
      this.init();
    }

    init() {
      this.detectBrowser();
      this.populateQuickInfo();
      this.testHTML5Features();
      this.testCSS3Features();
      this.testES6Features();
      this.testWebAPIs();
      this.testCSSFeatureDetection();
      this.showBrowserQuirks();
      this.generateFeatureMatrix();
      this.setupEventListeners();
    }

    detectBrowser() {
      const ua = navigator.userAgent;
      const vendor = navigator.vendor;
      
      this.browserInfo = {
        userAgent: ua,
        vendor: vendor,
        platform: navigator.platform,
        language: navigator.language,
        cookieEnabled: navigator.cookieEnabled,
        onLine: navigator.onLine,
        hardwareConcurrency: navigator.hardwareConcurrency || 'Unknown',
        deviceMemory: (navigator as any).deviceMemory || 'Unknown',
        maxTouchPoints: navigator.maxTouchPoints || 0
      };

      // Detailed browser detection
      if (ua.includes('Chrome') && vendor.includes('Google')) {
        this.browserInfo.name = 'Chrome';
        this.browserInfo.version = ua.match(/Chrome\/(\d+)/)?.[1] || 'Unknown';
        this.browserInfo.engine = 'Blink';
      } else if (ua.includes('Firefox')) {
        this.browserInfo.name = 'Firefox';
        this.browserInfo.version = ua.match(/Firefox\/(\d+)/)?.[1] || 'Unknown';
        this.browserInfo.engine = 'Gecko';
      } else if (ua.includes('Safari') && vendor.includes('Apple')) {
        this.browserInfo.name = 'Safari';
        this.browserInfo.version = ua.match(/Version\/(\d+)/)?.[1] || 'Unknown';
        this.browserInfo.engine = 'WebKit';
      } else if (ua.includes('Edge') || ua.includes('Edg')) {
        this.browserInfo.name = 'Edge';
        this.browserInfo.version = ua.match(/(?:Edge|Edg)\/(\d+)/)?.[1] || 'Unknown';
        this.browserInfo.engine = 'Blink';
      } else {
        this.browserInfo.name = 'Unknown';
        this.browserInfo.version = 'Unknown';
        this.browserInfo.engine = 'Unknown';
      }
    }

    populateQuickInfo() {
      const quickInfo = document.getElementById('quick-info');
      if (!quickInfo) return;

      quickInfo.innerHTML = `
        <div class="text-center p-4 bg-primary/5 rounded-lg">
          <div class="text-2xl font-bold text-primary">${this.browserInfo.name}</div>
          <div class="text-sm text-muted-foreground">v${this.browserInfo.version}</div>
        </div>
        <div class="text-center p-4 bg-primary/5 rounded-lg">
          <div class="text-2xl font-bold text-primary">${this.browserInfo.engine}</div>
          <div class="text-sm text-muted-foreground">Rendering Engine</div>
        </div>
        <div class="text-center p-4 bg-primary/5 rounded-lg">
          <div class="text-2xl font-bold text-primary">${this.browserInfo.hardwareConcurrency}</div>
          <div class="text-sm text-muted-foreground">CPU Cores</div>
        </div>
        <div class="text-center p-4 bg-primary/5 rounded-lg">
          <div class="text-2xl font-bold text-primary">${this.browserInfo.maxTouchPoints}</div>
          <div class="text-sm text-muted-foreground">Touch Points</div>
        </div>
      `;
    }

    testHTML5Features() {
      const features = [
        { name: 'Canvas', test: () => !!document.createElement('canvas').getContext },
        { name: 'Local Storage', test: () => typeof Storage !== 'undefined' },
        { name: 'Session Storage', test: () => typeof sessionStorage !== 'undefined' },
        { name: 'Web Workers', test: () => typeof Worker !== 'undefined' },
        { name: 'Geolocation', test: () => !!navigator.geolocation },
        { name: 'File API', test: () => typeof FileReader !== 'undefined' },
        { name: 'Drag and Drop', test: () => 'draggable' in document.createElement('div') },
        { name: 'History API', test: () => !!(window.history && history.pushState) },
        { name: 'WebSockets', test: () => typeof WebSocket !== 'undefined' },
        { name: 'Video', test: () => !!document.createElement('video').canPlayType },
        { name: 'Audio', test: () => !!document.createElement('audio').canPlayType },
        { name: 'IndexedDB', test: () => typeof indexedDB !== 'undefined' }
      ];

      this.renderFeatureList('html5-features', features);
    }

    testCSS3Features() {
      const features = [
        { name: 'Flexbox', test: () => CSS.supports('display', 'flex') },
        { name: 'Grid', test: () => CSS.supports('display', 'grid') },
        { name: 'CSS Variables', test: () => CSS.supports('--test', '1') },
        { name: 'Transforms', test: () => CSS.supports('transform', 'rotate(45deg)') },
        { name: 'Transitions', test: () => CSS.supports('transition', 'all 1s') },
        { name: 'Animations', test: () => CSS.supports('animation', 'test 1s') },
        { name: 'Border Radius', test: () => CSS.supports('border-radius', '10px') },
        { name: 'Box Shadow', test: () => CSS.supports('box-shadow', '0 0 10px black') },
        { name: 'Text Shadow', test: () => CSS.supports('text-shadow', '1px 1px 1px black') },
        { name: 'Gradients', test: () => CSS.supports('background', 'linear-gradient(red, blue)') },
        { name: 'Media Queries', test: () => window.matchMedia },
        { name: 'Backdrop Filter', test: () => CSS.supports('backdrop-filter', 'blur(10px)') },
        { name: 'Clip Path', test: () => CSS.supports('clip-path', 'circle(50%)') },
        { name: 'Mask', test: () => CSS.supports('mask', 'url(#mask)') || CSS.supports('-webkit-mask', 'url(#mask)') },
        { name: 'Container Queries', test: () => CSS.supports('container-type', 'inline-size') },
        { name: 'Aspect Ratio', test: () => CSS.supports('aspect-ratio', '16/9') }
      ];

      this.renderFeatureList('css3-features', features);
    }

    testES6Features() {
      const features = [
        { name: 'Arrow Functions', test: () => { try { eval('() => {}'); return true; } catch { return false; } } },
        { name: 'Template Literals', test: () => { try { eval('`test`'); return true; } catch { return false; } } },
        { name: 'Destructuring', test: () => { try { eval('const [a] = [1]'); return true; } catch { return false; } } },
        { name: 'Default Parameters', test: () => { try { eval('function test(a=1){}'); return true; } catch { return false; } } },
        { name: 'Rest Parameters', test: () => { try { eval('function test(...args){}'); return true; } catch { return false; } } },
        { name: 'Spread Operator', test: () => { try { eval('[...[]'); return true; } catch { return false; } } },
        { name: 'Classes', test: () => { try { eval('class Test{}'); return true; } catch { return false; } } },
        { name: 'Modules', test: () => { try { eval('import {}'); return false; } catch { return typeof module !== 'undefined'; } } },
        { name: 'Promises', test: () => typeof Promise !== 'undefined' },
        { name: 'Map', test: () => typeof Map !== 'undefined' },
        { name: 'Set', test: () => typeof Set !== 'undefined' },
        { name: 'WeakMap', test: () => typeof WeakMap !== 'undefined' },
        { name: 'Symbol', test: () => typeof Symbol !== 'undefined' },
        { name: 'Proxy', test: () => typeof Proxy !== 'undefined' },
        { name: 'Async/Await', test: () => { try { eval('async function test(){}'); return true; } catch { return false; } } },
        { name: 'BigInt', test: () => typeof BigInt !== 'undefined' }
      ];

      this.renderFeatureList('es6-features', features);
    }

    testWebAPIs() {
      // Storage APIs
      const storageAPIs = [
        { name: 'localStorage', test: () => typeof localStorage !== 'undefined' },
        { name: 'sessionStorage', test: () => typeof sessionStorage !== 'undefined' },
        { name: 'IndexedDB', test: () => typeof indexedDB !== 'undefined' },
        { name: 'Cache API', test: () => 'caches' in window }
      ];

      // Media APIs
      const mediaAPIs = [
        { name: 'MediaDevices', test: () => !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) },
        { name: 'Web Audio API', test: () => typeof AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined' },
        { name: 'WebRTC', test: () => typeof RTCPeerConnection !== 'undefined' },
        { name: 'Media Recorder', test: () => typeof MediaRecorder !== 'undefined' }
      ];

      // Performance APIs
      const performanceAPIs = [
        { name: 'Performance', test: () => typeof performance !== 'undefined' },
        { name: 'Performance Observer', test: () => typeof PerformanceObserver !== 'undefined' },
        { name: 'Navigation Timing', test: () => !!(performance && performance.timing) },
        { name: 'Resource Timing', test: () => !!(performance && performance.getEntriesByType) }
      ];

      // Network APIs
      const networkAPIs = [
        { name: 'Fetch API', test: () => typeof fetch !== 'undefined' },
        { name: 'WebSocket', test: () => typeof WebSocket !== 'undefined' },
        { name: 'Server-Sent Events', test: () => typeof EventSource !== 'undefined' },
        { name: 'Network Information', test: () => !!(navigator as any).connection }
      ];

      this.renderFeatureList('storage-apis', storageAPIs);
      this.renderFeatureList('media-apis', mediaAPIs);
      this.renderFeatureList('performance-apis', performanceAPIs);
      this.renderFeatureList('network-apis', networkAPIs);
    }

    testCSSFeatureDetection() {
      // Grid support
      const gridSupported = CSS.supports('display', 'grid');
      document.getElementById('grid-support').textContent = gridSupported ? '✅ Supported' : '❌ Not Supported';
      document.getElementById('grid-support').className = `text-xs ${gridSupported ? 'text-green-600' : 'text-red-600'}`;

      // Flexbox support
      const flexboxSupported = CSS.supports('display', 'flex');
      document.getElementById('flexbox-support').textContent = flexboxSupported ? '✅ Supported' : '❌ Not Supported';
      document.getElementById('flexbox-support').className = `text-xs ${flexboxSupported ? 'text-green-600' : 'text-red-600'}`;

      // Container queries support
      const containerSupported = CSS.supports('container-type', 'inline-size');
      document.getElementById('container-support').textContent = containerSupported ? '✅ Supported' : '❌ Not Supported';
      document.getElementById('container-support').className = `text-xs ${containerSupported ? 'text-green-600' : 'text-red-600'}`;

      // CSS Variables support
      const variablesSupported = CSS.supports('--test', '1');
      document.getElementById('variables-support').textContent = variablesSupported ? '✅ Supported' : '❌ Not Supported';
      document.getElementById('variables-support').className = `text-xs ${variablesSupported ? 'text-green-600' : 'text-red-600'}`;

      // Backdrop filter support
      const backdropSupported = CSS.supports('backdrop-filter', 'blur(10px)');
      document.getElementById('backdrop-support').textContent = backdropSupported ? '✅ Supported' : '❌ Not Supported';
      document.getElementById('backdrop-support').className = `text-xs ${backdropSupported ? 'text-green-600' : 'text-red-600'}`;

      // Clip path support
      const clipPathSupported = CSS.supports('clip-path', 'polygon(50% 0%, 0% 100%, 100% 100%)');
      document.getElementById('clippath-support').textContent = clipPathSupported ? '✅ Supported' : '❌ Not Supported';
      document.getElementById('clippath-support').className = `text-xs ${clipPathSupported ? 'text-green-600' : 'text-red-600'}`;

      // Mask support
      const maskSupported = CSS.supports('mask', 'linear-gradient(black, transparent)') || CSS.supports('-webkit-mask', 'linear-gradient(black, transparent)');
      document.getElementById('mask-support').textContent = maskSupported ? '✅ Supported' : '❌ Not Supported';
      document.getElementById('mask-support').className = `text-xs ${maskSupported ? 'text-green-600' : 'text-red-600'}`;
    }

    showBrowserQuirks() {
      const quirksContainer = document.getElementById('browser-quirks');
      if (!quirksContainer) return;

      const browserQuirks = {
        Chrome: [
          'Excellent CSS Grid and Flexbox support',
          'Full ES6+ support including modules',
          'Best performance for CSS animations',
          'Known issue: Auto-zoom on input focus in mobile'
        ],
        Firefox: [
          'Strong CSS Grid support with grid inspector',
          'Excellent accessibility features',
          'Good ES6+ support',
          'Known issue: Some backdrop-filter performance issues'
        ],
        Safari: [
          'Good WebKit engine performance',
          'Strong mobile optimization',
          'Limited CSS Grid support in older versions',
          'Known issue: Date input type not fully supported',
          'Requires -webkit- prefixes for some properties'
        ],
        Edge: [
          'Modern Chromium-based engine',
          'Good CSS Grid and Flexbox support',
          'Full ES6+ support',
          'Legacy Edge had different quirks (now deprecated)'
        ]
      };

      const currentBrowserQuirks = browserQuirks[this.browserInfo.name] || ['Unknown browser - limited compatibility information'];
      
      quirksContainer.innerHTML = `
        <div class="space-y-2">
          <h4 class="font-medium">Issues & Notes for ${this.browserInfo.name}</h4>
          <ul class="list-disc list-inside space-y-1 text-sm">
            ${currentBrowserQuirks.map(quirk => `<li>${quirk}</li>`).join('')}
          </ul>
        </div>
      `;

      // Show polyfill recommendations
      this.showPolyfillRecommendations();
    }

    showPolyfillRecommendations() {
      const polyfillContainer = document.getElementById('polyfill-recommendations');
      if (!polyfillContainer) return;

      const recommendations = [];

      // Check for missing features and recommend polyfills
      if (!CSS.supports('display', 'grid')) {
        recommendations.push('CSS Grid polyfill for older browsers');
      }
      if (typeof fetch === 'undefined') {
        recommendations.push('Fetch API polyfill (whatwg-fetch)');
      }
      if (typeof Promise === 'undefined') {
        recommendations.push('Promise polyfill (es6-promise)');
      }
      if (typeof IntersectionObserver === 'undefined') {
        recommendations.push('Intersection Observer polyfill');
      }

      if (recommendations.length === 0) {
        polyfillContainer.innerHTML = '<div class="text-sm text-green-600">✅ No polyfills needed for detected features</div>';
      } else {
        polyfillContainer.innerHTML = `
          <ul class="list-disc list-inside space-y-1 text-sm">
            ${recommendations.map(rec => `<li>${rec}</li>`).join('')}
          </ul>
        `;
      }
    }

    generateFeatureMatrix() {
      const matrixBody = document.getElementById('feature-matrix');
      if (!matrixBody) return;

      const features = [
        { name: 'CSS Grid', chrome: '✅', firefox: '✅', safari: '✅', edge: '✅' },
        { name: 'Flexbox', chrome: '✅', firefox: '✅', safari: '✅', edge: '✅' },
        { name: 'CSS Variables', chrome: '✅', firefox: '✅', safari: '✅', edge: '✅' },
        { name: 'Backdrop Filter', chrome: '✅', firefox: '⚠️', safari: '✅', edge: '✅' },
        { name: 'Container Queries', chrome: '✅', firefox: '✅', safari: '⚠️', edge: '✅' },
        { name: 'Web Components', chrome: '✅', firefox: '✅', safari: '✅', edge: '✅' },
        { name: 'ES6 Modules', chrome: '✅', firefox: '✅', safari: '✅', edge: '✅' },
        { name: 'WebP Images', chrome: '✅', firefox: '✅', safari: '✅', edge: '✅' },
        { name: 'AVIF Images', chrome: '✅', firefox: '✅', safari: '⚠️', edge: '✅' }
      ];

      matrixBody.innerHTML = features.map(feature => {
        const currentSupport = this.testFeatureSupport(feature.name);
        return `
          <tr class="border-b">
            <td class="p-2 font-medium">${feature.name}</td>
            <td class="text-center p-2">${feature.chrome}</td>
            <td class="text-center p-2">${feature.firefox}</td>
            <td class="text-center p-2">${feature.safari}</td>
            <td class="text-center p-2">${feature.edge}</td>
            <td class="text-center p-2">${currentSupport}</td>
          </tr>
        `;
      }).join('');
    }

    testFeatureSupport(featureName: string): string {
      switch (featureName) {
        case 'CSS Grid':
          return CSS.supports('display', 'grid') ? '✅' : '❌';
        case 'Flexbox':
          return CSS.supports('display', 'flex') ? '✅' : '❌';
        case 'CSS Variables':
          return CSS.supports('--test', '1') ? '✅' : '❌';
        case 'Backdrop Filter':
          return CSS.supports('backdrop-filter', 'blur(10px)') ? '✅' : '❌';
        case 'Container Queries':
          return CSS.supports('container-type', 'inline-size') ? '✅' : '❌';
        case 'Web Components':
          return (typeof customElements !== 'undefined') ? '✅' : '❌';
        case 'ES6 Modules':
          return (typeof module !== 'undefined' || 'import' in window) ? '✅' : '❌';
        case 'WebP Images':
          return this.testImageFormat('webp') ? '✅' : '❌';
        case 'AVIF Images':
          return this.testImageFormat('avif') ? '✅' : '❌';
        default:
          return '❓';
      }
    }

    testImageFormat(format: string): boolean {
      const canvas = document.createElement('canvas');
      canvas.width = 1;
      canvas.height = 1;
      return canvas.toDataURL(`image/${format}`).indexOf(`data:image/${format}`) === 0;
    }

    renderFeatureList(containerId: string, features: any[]) {
      const container = document.getElementById(containerId);
      if (!container) return;

      container.innerHTML = features.map(feature => {
        const supported = feature.test();
        const statusClass = supported ? 'feature-supported' : 'feature-not-supported';
        const statusIcon = supported ? '✅' : '❌';
        
        return `
          <div class="feature-item px-3 py-2 rounded border text-sm ${statusClass}">
            <div class="flex items-center justify-between">
              <span class="font-medium">${feature.name}</span>
              <span>${statusIcon}</span>
            </div>
          </div>
        `;
      }).join('');
    }

    setupEventListeners() {
      document.getElementById('run-comprehensive-test')?.addEventListener('click', () => {
        this.runComprehensiveTest();
      });

      document.getElementById('test-performance')?.addEventListener('click', () => {
        this.testPerformance();
      });

      document.getElementById('generate-compatibility-report')?.addEventListener('click', () => {
        this.generateReport();
      });

      document.getElementById('export-polyfill-config')?.addEventListener('click', () => {
        this.exportPolyfillConfig();
      });
    }

    async runComprehensiveTest() {
      const output = document.getElementById('test-output');
      const progressBar = document.getElementById('test-progress-bar');
      const progressText = document.getElementById('test-progress-text');
      
      if (!output || !progressBar || !progressText) return;

      output.innerHTML = 'Starting comprehensive compatibility test...\n';
      let progress = 0;

      const updateProgress = (step: string, percent: number) => {
        progress = percent;
        progressBar.style.width = `${percent}%`;
        progressText.textContent = step;
        output.innerHTML += `[${new Date().toLocaleTimeString()}] ${step}\n`;
        output.scrollTop = output.scrollHeight;
      };

      // Simulate comprehensive testing
      updateProgress('Detecting browser capabilities...', 10);
      await this.delay(500);
      
      updateProgress('Testing HTML5 features...', 25);
      await this.delay(300);
      
      updateProgress('Testing CSS3 features...', 40);
      await this.delay(300);
      
      updateProgress('Testing JavaScript ES6+ features...', 55);
      await this.delay(300);
      
      updateProgress('Testing Web APIs...', 70);
      await this.delay(300);
      
      updateProgress('Testing performance characteristics...', 85);
      await this.delay(500);
      
      updateProgress('Generating compatibility report...', 100);
      await this.delay(200);

      output.innerHTML += `\n✅ Comprehensive test completed successfully!\n`;
      output.innerHTML += `Browser: ${this.browserInfo.name} ${this.browserInfo.version}\n`;
      output.innerHTML += `Engine: ${this.browserInfo.engine}\n`;
      output.innerHTML += `Platform: ${this.browserInfo.platform}\n`;
      
      progressText.textContent = 'Test completed';
    }

    async testPerformance() {
      const output = document.getElementById('test-output');
      if (!output) return;

      output.innerHTML = 'Running performance tests...\n';

      // Test CSS animation performance
      const startTime = performance.now();
      const testElement = document.createElement('div');
      testElement.style.cssText = `
        width: 100px; height: 100px; background: red;
        position: absolute; top: -200px; left: -200px;
        animation: test-animation 1s linear infinite;
      `;
      
      const style = document.createElement('style');
      style.textContent = `
        @keyframes test-animation {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
      `;
      
      document.head.appendChild(style);
      document.body.appendChild(testElement);

      let frameCount = 0;
      let lastTime = startTime;
      
      const measureFPS = () => {
        frameCount++;
        const currentTime = performance.now();
        
        if (currentTime - lastTime >= 1000) {
          const fps = Math.round(frameCount * 1000 / (currentTime - lastTime));
          output.innerHTML += `Animation FPS: ${fps}\n`;
          
          // Cleanup
          document.body.removeChild(testElement);
          document.head.removeChild(style);
          
          // Test JavaScript performance
          this.testJavaScriptPerformance();
          return;
        }
        
        requestAnimationFrame(measureFPS);
      };
      
      requestAnimationFrame(measureFPS);
    }

    testJavaScriptPerformance() {
      const output = document.getElementById('test-output');
      if (!output) return;

      // Array operations test
      const arraySize = 100000;
      const testArray = new Array(arraySize).fill(0).map((_, i) => i);
      
      const startTime = performance.now();
      const filtered = testArray.filter(n => n % 2 === 0);
      const mapped = filtered.map(n => n * 2);
      const reduced = mapped.reduce((acc, n) => acc + n, 0);
      const endTime = performance.now();
      
      output.innerHTML += `JavaScript array operations (${arraySize} items): ${Math.round(endTime - startTime)}ms\n`;
      
      // DOM manipulation test
      const domStartTime = performance.now();
      const container = document.createElement('div');
      for (let i = 0; i < 1000; i++) {
        const element = document.createElement('div');
        element.textContent = `Item ${i}`;
        container.appendChild(element);
      }
      const domEndTime = performance.now();
      
      output.innerHTML += `DOM creation (1000 elements): ${Math.round(domEndTime - domStartTime)}ms\n`;
      output.innerHTML += `✅ Performance tests completed\n`;
    }

    generateReport() {
      const output = document.getElementById('test-output');
      if (!output) return;

      const report = {
        timestamp: new Date().toISOString(),
        browser: this.browserInfo,
        features: this.features,
        viewport: {
          width: window.innerWidth,
          height: window.innerHeight,
          pixelRatio: window.devicePixelRatio
        }
      };

      output.innerHTML = `Compatibility Report Generated:\n\n${JSON.stringify(report, null, 2)}`;
      
      // Create downloadable report
      const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `browser-compatibility-report-${Date.now()}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    exportPolyfillConfig() {
      const output = document.getElementById('test-output');
      if (!output) return;

      const polyfills = [];
      
      // Check what polyfills are needed
      if (typeof fetch === 'undefined') {
        polyfills.push('es6.promise', 'whatwg-fetch');
      }
      if (typeof IntersectionObserver === 'undefined') {
        polyfills.push('intersection-observer');
      }
      if (!CSS.supports('display', 'grid')) {
        polyfills.push('css-grid-polyfill');
      }

      const config = {
        polyfills: polyfills,
        browserTarget: `${this.browserInfo.name} ${this.browserInfo.version}`,
        recommendation: polyfills.length === 0 ? 'No polyfills needed' : 'Use polyfill.io or include individual polyfills',
        polyfillIOUrl: `https://polyfill.io/v3/polyfill.min.js?features=${polyfills.join(',')}`,
        manualIncludes: polyfills.map(p => ({
          name: p,
          npm: `npm install ${p}`,
          cdn: `https://cdn.jsdelivr.net/npm/${p}/`
        }))
      };

      output.innerHTML = `Polyfill Configuration:\n\n${JSON.stringify(config, null, 2)}`;
    }

    delay(ms: number): Promise<void> {
      return new Promise(resolve => setTimeout(resolve, ms));
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new BrowserCompatibilityValidator();
  });
</script>