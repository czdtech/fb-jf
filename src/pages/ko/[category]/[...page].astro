---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import Navigation from '@/components/Navigation.astro';
import Footer from '@/components/Footer.astro';
import GamesList from '@/components/GamesList.astro';
import UnifiedPagination from '@/components/UnifiedPagination.astro';
import EmptyState from '@/components/EmptyState.astro';
import { getTranslation } from '@/i18n/utils';
import type { SupportedLocale } from '@/i18n/utils';
import { generateSEOPagination } from '@/utils/pagination';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { filterGamesByLanguage, filterGamesByCategory, getPaginatedGames, validateGameData } from '@/utils/content';
import extractedData from '@/data/extracted-data.json';

const { navigation } = extractedData;
const currentLocale: SupportedLocale = 'ko';

export async function getStaticPaths() {
  const categories = [
    { slug: 'popular-games', category: 'popular' },
    { slug: 'trending-games', category: 'trending' },
    { slug: 'new-games', category: 'new' }
  ];

  const paths = [];
  for (const { slug, category } of categories) {
    try {
      const allGames = await getCollection('games');
      const koGames = filterGamesByLanguage(allGames, 'ko');
      const categoryGames = filterGamesByCategory(koGames, category);
      const validGames = categoryGames.filter(validateGameData);
      const paginationData = getPaginatedGames(validGames);
      const totalPages = Math.max(1, paginationData.totalPages);

      for (let page = 1; page <= totalPages; page++) {
        const pageData = getPaginatedGames(validGames, page);
        paths.push({
          params: { category: slug, page: page === 1 ? undefined : page.toString() },
          props: { locale: 'ko', category, slug, pageNumber: page, allGames: pageData.games, totalGames: pageData.totalItems, paginationData: pageData }
        });
      }
    } catch (error) {
      console.error(`Error generating ko paths for ${slug}:`, error);
    }
  }
  return paths;
}

const { category, slug, pageNumber, allGames, paginationData } = Astro.props;
const { ui } = await getTranslation(currentLocale);

const paginationResult = {
  games: allGames,
  currentPage: paginationData.currentPage,
  totalPages: paginationData.totalPages,
  totalItems: paginationData.totalItems,
  isEmpty: paginationData.isEmpty
};

const getCategoryTitle = (category: string) => {
  switch (category) {
    case 'popular': return ui.sections?.popularGames || '인기 게임';
    case 'trending': return ui.sections?.trendingGames || '트렌딩 게임';
    case 'new': return ui.sections?.newGames || '새로운 게임';
    default: return '게임';
  }
};

const categoryTitle = getCategoryTitle(category);
const seoUrls = generateSEOPagination(`/${slug}`, pageNumber, paginationResult.totalPages, currentLocale);

const meta = {
  title: pageNumber === 1 ? `${categoryTitle} - Fiddlebops` : `${categoryTitle} - ${pageNumber}페이지 - Fiddlebops`,
  description: `${categoryTitle} - ${pageNumber === 1 ? '' : `${pageNumber}페이지 - `}Fiddlebops`,
  canonical: seoUrls.canonical,
  keywords: `${categoryTitle}, fiddlebops, 음악 게임, incredibox`,
  ogImage: 'https://www.playfiddlebops.com/tw.jpg',
  prevUrl: seoUrls.prev,
  nextUrl: seoUrls.next
};
---

<BaseLayout meta={meta} lang={currentLocale}>
  <Navigation navigation={navigation.main} currentLocale={currentLocale} />
  <main class="main">
    <div class="container">
      <h1 class="page-title">{categoryTitle}</h1>
      {paginationResult.isEmpty ? (
        <EmptyState category={category} title={`${categoryTitle}을 찾을 수 없습니다`} description={`현재 이용 가능한 ${categoryTitle}이 없습니다. 나중에 다시 확인하거나 다른 카테고리를 탐색해보세요.`} backButtonText="모든 게임 보기" backButtonUrl={getRelativeLocaleUrl(currentLocale, '/games/')} />
      ) : (
        <>
          <GamesList games={paginationResult.games} currentLocale={currentLocale} />
          {paginationResult.totalPages > 1 && (
            <UnifiedPagination currentPage={paginationResult.currentPage} totalPages={paginationResult.totalPages} basePath={`/${slug}`} currentLocale={currentLocale} variant="standard" />
          )}
        </>
      )}
    </div>
  </main>
  <Footer currentLocale={currentLocale} />
</BaseLayout>

<style>
.main { padding: 2rem 0; min-height: 70vh; }
.container { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }
.page-title { font-size: 2.5rem; font-weight: 700; text-align: center; margin-bottom: 3rem; color: var(--text-primary); }
@media (max-width: 768px) { .page-title { font-size: 2rem; margin-bottom: 2rem; } }
</style>
