---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import Navigation from '@/components/Navigation.astro';
import Footer from '@/components/Footer.astro';
import GamesHero from '@/components/games/GamesHero.astro';
import GameFilters from '@/components/games/GameFilters.astro';
import GameGrid from '@/components/GameGrid.astro';
import UnifiedPagination from '@/components/UnifiedPagination.astro';
import { generateHreflangLinks } from '@/utils/hreflang';
import { getEnglishGamesPaginated } from '@/utils/content';

// 导入分页配置
import { PAGINATION_CONFIG } from '@/config/pagination';

// 导入数据
import extractedData from '@/data/extracted-data.json';

// --- 环境变量 ---
const SITE_URL = (import.meta.env.PUBLIC_SITE_URL || 'https://www.playfiddlebops.com').replace(/\/$/, '');

// --- 类型定义 ---
interface GamePageItem {
  slug: string;
  url: string;
  imageUrl: string;
  title: string;
  category: string;
  rating: number;
  description: string;
  iframe: string;
}

interface Language {
  code: string;
  url: string;
  label: string;
}

// --- 静态路径生成 ---
export async function getStaticPaths() {
  // 使用统一工具获取所有英文游戏和分页信息
  const allGamesData = await getEnglishGamesPaginated();
  
  // 格式化游戏数据
  const formattedGames: GamePageItem[] = allGamesData.games.map((game: any) => {
    const baseSlug = game.data.slug;
    
    return {
      slug: baseSlug,
      url: `/${baseSlug}/`,
      imageUrl: game.data.image,
      title: game.data.title,
      category: game.data.category,
      rating: game.data.rating?.score || 5,
      description: game.data.description,
      iframe: game.data.iframe,
    };
  });

  const totalGames = allGamesData.totalItems;
  const totalPages = allGamesData.totalPages;

  const paths = [];

  // 使用统一的分页工具生成所有页面路径
  for (let i = 1; i <= totalPages; i++) {
    const pageData = await getEnglishGamesPaginated(undefined, i);
    const currentGames = pageData.games.map((game: any) => ({
      slug: game.data.slug,
      url: `/${game.data.slug}/`,
      imageUrl: game.data.image,
      title: game.data.title,
      category: game.data.category,
      rating: game.data.rating?.score || 5,
      description: game.data.description,
      iframe: game.data.iframe,
    }));

    paths.push({
      params: { page: i === 1 ? undefined : i.toString() },
      props: {
        page: {
          data: currentGames,
          currentPage: pageData.currentPage,
          lastPage: pageData.totalPages,
          total: pageData.totalItems,
          start: pageData.startIndex,
          url: {
            prev: pageData.hasPrevPage ? (i === 2 ? `/games/` : `/games/${i - 1}/`) : undefined,
            next: pageData.hasNextPage ? `/games/${i + 1}/` : undefined
          }
        },
        allGames: formattedGames
      },
    });
  }

  return paths;
}

// --- 页面属性 ---
const { page, allGames } = Astro.props as {
  page: {
    data: GamePageItem[];
    currentPage: number;
    lastPage: number;
    total: number;
    start: number;
    url: {
      prev?: string;
      next?: string;
    };
  };
  allGames: GamePageItem[];
};

// --- 从extractedData中获取导航数据 ---
const { navigation } = extractedData;

// --- 从extractedData中获取游戏分类 ---
const categories = [
  { name: 'All Games', count: allGames.length, active: true },
  { name: 'Music', count: allGames.filter(g => g.category === 'Music').length, active: false },
  { name: 'Rhythm', count: allGames.filter(g => g.category === 'Rhythm').length, active: false },
  { name: 'Creative', count: allGames.filter(g => g.category === 'Creative').length, active: false },
];

// --- 多语言配置（统一使用工具函数生成） ---
const hreflangLinks = generateHreflangLinks(
  navigation?.languages || [],
  `/games${page.currentPage > 1 ? `/${page.currentPage}` : ''}/`,
  SITE_URL
);

// --- SEO配置 ---
const meta = {
  title: page.currentPage === 1
    ? "All Music Creation Games - Fiddlebops"
    : `Music Games - Page ${page.currentPage} - Fiddlebops`,
  description: page.currentPage === 1
    ? "Explore our complete collection of music creation games. Play Fiddlebops, Sprunki, and more innovative rhythm games online for free."
    : `Browse page ${page.currentPage} of our music creation games collection. Discover new Fiddlebops and Sprunki games to play online.`,
  keywords: `music games, rhythm games, fiddlebops, sprunki, online games, free games${page.currentPage > 1 ? `, page ${page.currentPage}` : ''}`,
  canonical: `${SITE_URL}/games${page.currentPage > 1 ? `/${page.currentPage}` : ''}/`,
  ogImage: `${SITE_URL}/tw.jpg`,
  prevUrl: page.url.prev ? `${SITE_URL}${page.url.prev}` : undefined,
  nextUrl: page.url.next ? `${SITE_URL}${page.url.next}` : undefined
};

// --- 结构化数据 ---
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": meta.title,
  "description": meta.description,
  "url": meta.canonical,
  "numberOfItems": page.total,
  "hasPart": page.data.map(game => ({
    "@type": "Game",
    "name": game.title,
    "url": `${SITE_URL}${game.url}`,
    "image": `${SITE_URL}${game.imageUrl}`,
    "genre": game.category
  }))
};
---

<BaseLayout
  meta={meta}
  hreflang={hreflangLinks}
  structuredData={structuredData}
>
  <Navigation
    navigation={navigation.main}
    languages={navigation.languages}
    currentLang="en"
    currentPath={`/games${page.currentPage > 1 ? `/${page.currentPage}` : ''}/`}
  />

  <main>
    <!-- Hero Section -->
    <GamesHero
      pageTotal={page.total}
      pageCount={page.lastPage}
      breadcrumbs={{ home: 'Home', current: 'All Games' }}
      title={{ main: 'All', accent: 'Games' }}
      subtitle={`${page.total} amazing music creation experiences`}
    />

    <!-- Games Grid -->
    <section class="py-16 bg-gray-50 min-h-[60vh]">
      <div class="responsive-container container-standard">
        <!-- Game Filters -->
        <GameFilters categories={categories} totalGames={allGames.length} />

        <!-- Results Info -->
        <div class="mb-8 text-center results-info">
          <p class="text-sm text-gray-600">
            Showing {page.start + 1}-{Math.min(page.start + page.data.length, page.total)} of {page.total} games
          </p>
        </div>

        <!-- Games Grid -->
        <!-- 适配 GameGrid 的 Game 类型结构 -->
        <GameGrid games={page.data.map((g: any) => ({ 
          id: g.slug, 
          slug: g.slug, 
          title: g.title, 
          description: g.description || '', 
          image: g.imageUrl, 
          iframe: g.iframe || '', 
          category: g.category || 'popular', 
          meta: { 
            title: g.title, 
            description: g.description || '', 
            canonical: g.url, 
            ogImage: g.imageUrl 
          } 
        }))} variant="standard" />

        <!-- Pagination -->
        <UnifiedPagination
          currentPage={page.currentPage}
          totalPages={page.lastPage}
          totalItems={page.total}
          basePath="/games"
          variant="games"
        />
      </div>
    </section>
  </main>

  <Footer />
</BaseLayout>
