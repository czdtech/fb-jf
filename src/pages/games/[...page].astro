---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import GamesHero from '@/components/games/GamesHero.astro';
import GameFilters from '@/components/games/GameFilters.astro';
import GameGrid from '@/components/GameGrid.astro';
import GamesPagination from '@/components/games/GamesPagination.astro';

// 导入数据
import extractedData from '@/data/extracted-data.json';

// --- 环境变量 ---
const SITE_URL = import.meta.env.PUBLIC_SITE_URL || 'https://playfiddlebops.com';

// --- 类型定义 ---
interface GamePageItem {
  slug: string;
  url: string;
  imageUrl: string;
  title: string;
  category: string;
  rating: number;
}

interface Language {
  code: string;
  url: string;
  label: string;
}

// --- 静态路径生成 ---
export async function getStaticPaths() {
  // 获取所有游戏
  const allGames = await getCollection('games');
  
  const formattedGames: GamePageItem[] = allGames.map((game) => {
    return {
      slug: game.slug,
      url: `/${game.slug}/`,
      imageUrl: game.data.image,
      title: game.data.title,
      category: game.data.category,
      rating: game.data.rating?.score || 5, // 默认5星评分
    };
  });

  const pageSize = 30;
  const totalGames = formattedGames.length;
  const totalPages = Math.ceil(totalGames / pageSize);

  const paths = [];

  // 生成所有页面路径
  for (let i = 1; i <= totalPages; i++) {
    const startIndex = (i - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const currentGames = formattedGames.slice(startIndex, endIndex);

    paths.push({
      params: { page: i === 1 ? undefined : i.toString() },
      props: {
        page: {
          data: currentGames,
          currentPage: i,
          lastPage: totalPages,
          total: totalGames,
          start: startIndex,
          url: {
            prev: i > 1 ? (i === 2 ? `/games/` : `/games/${i - 1}/`) : undefined,
            next: i < totalPages ? `/games/${i + 1}/` : undefined
          }
        },
        allGames: formattedGames
      },
    });
  }

  return paths;
}

// --- 页面属性 ---
const { page, allGames } = Astro.props as {
  page: {
    data: GamePageItem[];
    currentPage: number;
    lastPage: number;
    total: number;
    start: number;
    url: {
      prev?: string;
      next?: string;
    };
  };
  allGames: GamePageItem[];
};

// --- 从extractedData中获取导航数据 ---
const { navigation } = extractedData;

// --- 从extractedData中获取游戏分类 ---
const categories = [
  { name: 'All Games', count: allGames.length, active: true },
  { name: 'Music', count: allGames.filter(g => g.category === 'Music').length, active: false },
  { name: 'Rhythm', count: allGames.filter(g => g.category === 'Rhythm').length, active: false },
  { name: 'Creative', count: allGames.filter(g => g.category === 'Creative').length, active: false },
];

// --- 多语言配置 ---
const hreflangLinks = navigation?.languages?.map((lang: Language) => ({
  code: lang.code === 'en' ? 'x-default' : lang.code,
  url: `${SITE_URL}${lang.code !== 'en' ? `/${lang.code}` : ''}/games${page.currentPage > 1 ? `/${page.currentPage}` : ''}/`,
  label: lang.label
})) || [];

// --- SEO配置 ---
const meta = {
  title: page.currentPage === 1 
    ? "All Music Creation Games - Fiddlebops"
    : `Music Games - Page ${page.currentPage} - Fiddlebops`,
  description: page.currentPage === 1
    ? "Explore our complete collection of music creation games. Play Fiddlebops, Sprunki, and more innovative rhythm games online for free."
    : `Browse page ${page.currentPage} of our music creation games collection. Discover new Fiddlebops and Sprunki games to play online.`,
  keywords: `music games, rhythm games, fiddlebops, sprunki, online games, free games${page.currentPage > 1 ? `, page ${page.currentPage}` : ''}`,
  canonical: `${SITE_URL}/games${page.currentPage > 1 ? `/${page.currentPage}` : ''}/`,
  ogImage: `${SITE_URL}/games-og.jpg`
};

// --- 结构化数据 ---
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": meta.title,
  "description": meta.description,
  "url": meta.canonical,
  "numberOfItems": page.total,
  "hasPart": page.data.map(game => ({
    "@type": "Game",
    "name": game.title,
    "url": `${SITE_URL}${game.url}`,
    "image": `${SITE_URL}${game.imageUrl}`,
    "genre": game.category
  }))
};
---

<BaseLayout 
  meta={meta}
  hreflang={hreflangLinks}
  structuredData={structuredData}
>
  <Header 
    navigation={navigation.main}
    languages={navigation.languages}
    currentLang="en"
    currentPath={`/games${page.currentPage > 1 ? `/${page.currentPage}` : ''}/`}
  />

  <main>
    <!-- Hero Section -->
    <GamesHero 
      pageTotal={page.total}
      pageCount={page.lastPage}
      breadcrumbs={{ home: 'Home', current: 'All Games' }}
      title={{ main: 'All', accent: 'Games' }}
      subtitle={`${page.total} amazing music creation experiences`}
    />

    <!-- Games Grid -->
    <section class="py-16 bg-gray-50 min-h-[60vh]">
      <div class="container mx-auto px-4">
        <!-- Game Filters -->
        <GameFilters categories={categories} totalGames={allGames.length} />

        <!-- Results Info -->
        <div class="mb-8 text-center results-info">
          <p class="text-sm text-gray-600">
            Showing {page.start + 1}-{Math.min(page.start + page.data.length, page.total)} of {page.total} games
          </p>
        </div>

        <!-- Games Grid -->
        <GameGrid games={page.data} variant="standard" />

        <!-- Pagination -->
        <GamesPagination 
          currentPage={page.currentPage}
          totalPages={page.lastPage}
          totalItems={page.total}
          prevUrl={page.url.prev}
          nextUrl={page.url.next}
          basePath="/games/"
        />
      </div>
    </section>
  </main>

  <Footer />
</BaseLayout>

