---
import BaseLayout from '@/layouts/BaseLayout.astro'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'

// 导入数据
import extractedData from '@/data/extracted-data.json'
import gamesExtendedData from '@/data/games-extended.json'

export function getStaticPaths({ paginate }: any) {
  // 使用JSON文件中的游戏数据，转换为所需格式
  const astronautPages = gamesExtendedData.allGames.map((game: any) => {
    // 优先使用SEO中的ogImage路径（去掉域名部分），如果没有则使用image字段
    let imagePath = game.image;
    if (game.seo && game.seo.ogImage) {
      // 从完整URL中提取路径部分
      imagePath = game.seo.ogImage.replace('https://www.playfiddlebops.com', '');
    }

    return {
      astronaut: [`/${game.slug}/`, imagePath, game.title],
      gameData: game // 传递完整的游戏数据
    };
  });

  return paginate(astronautPages, { pageSize: 30 });
}

const { page } = Astro.props as { page: any };
const { navigation, homepage } = extractedData;

// 分类名称映射
const categoryNames = {
  'popular': 'Popular',
  'new': 'New Release',
  'trending': 'Trending',
  'featured': 'Featured',
  'classic': 'Classic'
};

const formatCategory = (category: string) => {
  return categoryNames[category as keyof typeof categoryNames] || 'Music Creation';
};

// 面包屑导航数据
const breadcrumbData = {
  home: "Home",
  current: "Games"
};

// 多语言配置
const hreflangLinks = navigation.languages.map((lang: any) => ({
  code: lang.code === 'en' ? 'x-default' : lang.code,
  url: `https://www.playfiddlebops.com/games/${lang.url}`,
  label: lang.label,
}))

// Meta data for the games page
const meta = {
  title: `Musical Games Collection - Page ${page.currentPage} | FiddleBops`,
  description: "Discover an amazing collection of musical creation games. From Sprunki remixes to Incredibox variants, explore endless creative possibilities in our curated game library.",
  canonical: `https://www.playfiddlebops.com/games/${page.currentPage > 1 ? page.currentPage + '/' : ''}`,
  ogImage: "https://www.playfiddlebops.com/tw.jpg"
}

// 结构化数据
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'CollectionPage',
  name: meta.title,
  description: meta.description,
  url: meta.canonical,
  mainEntity: {
    '@type': 'ItemList',
    numberOfItems: page.total,
    itemListElement: page.data.map((item: any, index: any) => ({
      '@type': 'Game',
      position: (page.currentPage - 1) * page.size + index + 1,
      name: item.astronaut[2],
      url: `https://www.playfiddlebops.com${item.astronaut[0]}`,
      image: `https://www.playfiddlebops.com${item.astronaut[1]}`,
    }))
  }
}
---

<BaseLayout
  meta={meta}
  lang="en"
  hreflang={hreflangLinks}
  structuredData={structuredData}
>
  <Header
    navigation={navigation.main}
    languages={navigation.languages}
    currentLang="en"
    currentPath="/games/"
  />

  <main class="games-page">
    <!-- Hero Section with Consistent Design -->
    <section class="games-hero section">
      <div class="container">
        <div class="games-hero-content">
          <!-- 面包屑导航 - 与其他页面保持一致 -->
          <nav class="breadcrumb" aria-label="面包屑导航">
            <a href="/" class="breadcrumb-link">
              <i class="fas fa-home"></i>
              <span>{breadcrumbData.home}</span>
            </a>
            <span class="breadcrumb-separator">></span>
            <span class="breadcrumb-current">{breadcrumbData.current}</span>
          </nav>

          <div class="hero-content">
            <h1 class="games-title heading-display">
              <span class="title-main">Musical</span>
              <span class="title-accent">Universe</span>
            </h1>
            <p class="games-subtitle body-large">
              Discover endless musical creativity with our collection of interactive rhythm games
            </p>
            <div class="games-stats">
              <div class="stat glass">
                <span class="stat-number">{page.total}</span>
                <span class="stat-label">Games</span>
              </div>
              <div class="stat glass">
                <span class="stat-number">{page.lastPage}</span>
                <span class="stat-label">Pages</span>
              </div>
              <div class="stat glass">
                <span class="stat-number">∞</span>
                <span class="stat-label">Creativity</span>
              </div>
            </div>
          </div>

          <!-- 装饰性音符 - 与其他页面保持一致 -->
          <div class="musical-notes">
            {Array.from({ length: 12 }, (_, i) => (
              <div class="note" style={`animation-delay: ${i * 0.3}s`}>
                {i % 4 === 0 ? '♪' : i % 4 === 1 ? '♫' : i % 4 === 2 ? '♬' : '♩'}
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Games Grid Section -->
    <section class="games-collection section">
      <div class="container">
        <div class="section-header">
          <h2 class="section-title heading-large">
            <span class="section-title-text">Featured Games</span>
            <span class="section-title-accent">Page {page.currentPage}</span>
          </h2>
        </div>

        <div class="games-grid">
          {page.data.map(({ astronaut, gameData }: any, index: any) => (
            <article class="game-card glass animate-in" data-index={index} style={`animation-delay: ${index * 0.08}s`}>
              <a href={astronaut[0]} class="game-link" title={astronaut[2]}>
                <div class="game-card-inner">
                  <!-- Game Image Container -->
                  <div class="game-image-container">
                    <div class="game-image-overlay">
                      <div class="play-button glass">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                          <path d="M8 5v14l11-7z"/>
                        </svg>
                      </div>
                      <div class="game-glow"></div>
                    </div>
                    <img
                      src={astronaut[1]}
                      alt={astronaut[2]}
                      class="game-image"
                      loading="lazy"
                      decoding="async"
                    />
                  </div>

                  <!-- Game Info -->
                  <div class="game-info">
                    <h3 class="game-title heading-medium">{astronaut[2]}</h3>
                    <div class="game-meta">
                      <span class="game-category">{formatCategory(gameData.category)}</span>
                      <span class="game-rating">
                        <span class="stars">
                          {Array.from({ length: 5 }, (_, i) => (
                            <span class={i < gameData.rating.stars ? 'star filled' : 'star empty'}>★</span>
                          ))}
                        </span>
                      </span>
                    </div>
                  </div>
                </div>
              </a>
            </article>
          ))}
        </div>

        <!-- Enhanced Pagination -->
        <nav class="pagination glass" aria-label="Games pagination">
          <div class="pagination-info">
            <span class="pagination-text body-small">
              Page <strong>{page.currentPage}</strong> of <strong>{page.lastPage}</strong>
              <span class="pagination-total">({page.total} games total)</span>
            </span>
          </div>

          <div class="pagination-controls">
            {page.url.prev && (
              <a href={page.url.prev} class="btn btn-secondary btn-sm pagination-btn" rel="prev">
                <svg viewBox="0 0 24 24" fill="currentColor">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
                <span>Previous</span>
              </a>
            )}

            <div class="pagination-pages">
              {Array.from({ length: page.lastPage }, (_, i) => {
                const pageNum = i + 1;
                const isCurrentPage = pageNum === page.currentPage;
                const pageUrl = pageNum === 1 ? '/games/' : `/games/${pageNum}/`;

                return (
                  <a
                    href={pageUrl}
                    class={`pagination-page ${isCurrentPage ? 'active' : ''}`}
                    aria-current={isCurrentPage ? 'page' : undefined}
                  >
                    {pageNum}
                  </a>
                );
              })}
            </div>

            {page.url.next && (
              <a href={page.url.next} class="btn btn-secondary btn-sm pagination-btn" rel="next">
                <span>Next</span>
                <svg viewBox="0 0 24 24" fill="currentColor">
                  <path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z"/>
                </svg>
              </a>
            )}
          </div>
        </nav>
      </div>
    </section>
  </main>

  <Footer />
</BaseLayout>

<style>
  /* ===== GAMES PAGE SPECIFIC STYLES ===== */
  /* 与现代设计系统保持完全一致 */

  /* 页面背景 - 与首页保持一致 */
  body {
    background: var(--hero-main-bg);
    min-height: 100vh;
  }

  .games-page {
    background: transparent;
  }

  /* Hero Section - 与其他页面保持一致的样式 */
  .games-hero {
    background: var(--hero-main-bg);
    color: var(--color-text);
    padding: var(--space-16) 0 var(--space-12);
    padding-top: calc(80px + var(--space-8)); /* Add space for fixed header */
    position: relative;
    overflow: hidden;
    min-height: 70vh;
    display: flex;
    align-items: center;
  }

  .games-hero::before {
    content: '';
    position: absolute;
    inset: 0;
    background: var(--hero-texture-bg);
    opacity: var(--hero-texture-opacity);
    pointer-events: none;
  }

  .games-hero-content {
    position: relative;
    z-index: 10;
    text-align: center;
  }

  /* 面包屑导航 - 与其他页面完全一致 */
  .breadcrumb {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    margin-bottom: var(--space-8);
    font-size: var(--font-size-sm);
    justify-content: center;
  }

  .breadcrumb-link {
    display: flex;
    align-items: center;
    gap: var(--space-1);
    color: var(--color-primary-600);
    text-decoration: none;
    transition: all var(--duration-200) var(--ease-in-out);
    padding: var(--space-1) var(--space-2);
    border-radius: var(--border-radius-md);
  }

  .breadcrumb-link:hover {
    color: var(--color-primary-700);
    background: rgba(147, 51, 234, 0.1);
  }

  .breadcrumb-separator {
    color: var(--color-gray-400);
    font-weight: 500;
  }

  .breadcrumb-current {
    color: var(--color-gray-600);
    font-weight: 500;
  }

  /* Hero Content */
  .hero-content {
    margin-bottom: var(--space-8);
  }

  .games-title {
    margin-bottom: var(--space-6);
    text-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  .title-main {
    display: block;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .title-accent {
    display: block;
    background: linear-gradient(45deg, var(--color-primary-600) 0%, var(--color-primary-700) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-left: 2rem;
  }

  .games-subtitle {
    margin-bottom: var(--space-8);
    color: var(--color-text-muted);
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .games-stats {
    display: flex;
    justify-content: center;
    gap: var(--space-8);
    flex-wrap: wrap;
  }

  .stat {
    text-align: center;
    padding: var(--space-4) var(--space-6);
    border-radius: var(--border-radius-lg);
    min-width: 120px;
  }

  .stat-number {
    display: block;
    font-size: var(--font-size-4xl);
    font-weight: var(--font-weight-bold);
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .stat-label {
    display: block;
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-text-muted);
    margin-top: var(--space-1);
  }

  /* 装饰性音符 - 与其他页面保持一致 */
  .musical-notes {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    overflow: hidden;
  }

  .note {
    position: absolute;
    font-size: var(--font-size-2xl);
    color: rgba(147, 51, 234, 0.1);
    animation: float-note 8s ease-in-out infinite;
    user-select: none;
  }

  .note:nth-child(1) { top: 20%; left: 10%; }
  .note:nth-child(2) { top: 30%; left: 80%; }
  .note:nth-child(3) { top: 60%; left: 15%; }
  .note:nth-child(4) { top: 70%; left: 85%; }
  .note:nth-child(5) { top: 40%; left: 90%; }
  .note:nth-child(6) { top: 50%; left: 5%; }
  .note:nth-child(7) { top: 25%; left: 50%; }
  .note:nth-child(8) { top: 75%; left: 45%; }
  .note:nth-child(9) { top: 35%; left: 25%; }
  .note:nth-child(10) { top: 65%; left: 75%; }
  .note:nth-child(11) { top: 45%; left: 35%; }
  .note:nth-child(12) { top: 55%; left: 65%; }

  @keyframes float-note {
    0%, 100% {
      transform: translateY(0px) rotate(0deg);
      opacity: 0.1;
    }
    25% {
      transform: translateY(-15px) rotate(5deg);
      opacity: 0.15;
    }
    50% {
      transform: translateY(-30px) rotate(-3deg);
      opacity: 0.1;
    }
    75% {
      transform: translateY(-15px) rotate(3deg);
      opacity: 0.15;
    }
  }

  /* Games Collection */
  .games-collection {
    background: transparent;
  }

  .section-header {
    text-align: center;
    margin-bottom: var(--space-12);
  }

  .section-title-text {
    display: block;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .section-title-accent {
    display: block;
    font-size: 0.6em;
    font-weight: var(--font-weight-normal);
    color: var(--color-text-muted);
    margin-top: var(--space-2);
  }

  /* Games Grid */
  .games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: var(--space-8);
    margin-bottom: var(--space-12);
  }

  .game-card {
    background: var(--hero-sidebar-glass-bg);
    backdrop-filter: var(--hero-sidebar-glass-blur);
    -webkit-backdrop-filter: var(--hero-sidebar-glass-blur);
    border: var(--hero-sidebar-glass-border);
    box-shadow:
      var(--hero-sidebar-glass-shadow),
      0 4px 20px rgba(147, 51, 234, 0.05);
    border-radius: var(--border-radius-xl);
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    opacity: 1;
    transform: translateY(0);
    display: block;
    position: relative;
  }

  /* 优雅的入场动画 */
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(40px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .animate-in {
    animation: slideInUp 0.6s cubic-bezier(0.165, 0.84, 0.44, 1) both;
  }

  .game-card:hover {
    transform: translateY(-12px) scale(1.03);
    box-shadow:
      0 25px 50px rgba(147, 51, 234, 0.15),
      0 12px 40px rgba(0, 0, 0, 0.1),
      0 4px 12px rgba(147, 51, 234, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.8);
    border-color: rgba(147, 51, 234, 0.4);
  }

  .game-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg,
      rgba(147, 51, 234, 0.05) 0%,
      rgba(236, 72, 153, 0.05) 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    border-radius: inherit;
  }

  .game-card:hover::before {
    opacity: 1;
  }

  .game-link {
    display: block;
    text-decoration: none;
    color: inherit;
    height: 100%;
  }

  .game-card-inner {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  /* Game Image */
  .game-image-container {
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
  }

  .game-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--duration-300) var(--ease-rhythm);
  }

  .game-card:hover .game-image {
    transform: scale(1.1);
  }

  .game-image-overlay {
    position: absolute;
    inset: 0;
    background: var(--gradient-primary);
    opacity: 0;
    transition: opacity var(--duration-200) ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .game-card:hover .game-image-overlay {
    opacity: 0.8;
  }

  .play-button {
    width: 4rem;
    height: 4rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-primary-600);
    transform: scale(0.8);
    transition: all var(--duration-300) var(--ease-beat);
  }

  .game-card:hover .play-button {
    transform: scale(1);
  }

  .play-button svg {
    width: 1.5rem;
    height: 1.5rem;
    margin-left: 0.25rem;
  }

  .game-glow {
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at center, rgba(147, 51, 234, 0.3) 0%, transparent 70%);
    opacity: 0;
    transition: opacity var(--duration-200) ease;
  }

  .game-card:hover .game-glow {
    opacity: 1;
  }

  /* Game Info */
  .game-info {
    padding: var(--space-6);
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .game-title {
    margin-bottom: var(--space-4);
    color: var(--color-text);
    line-height: 1.3;
  }

  .game-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: var(--font-size-xs);
    margin-top: auto;
  }

  .game-category {
    padding: var(--space-1) var(--space-3);
    background: var(--gradient-primary);
    color: white;
    border-radius: var(--border-radius-full);
    font-weight: var(--font-weight-medium);
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .game-rating {
    color: var(--color-warning);
  }

  .stars {
    color: var(--color-warning);
    font-size: var(--font-size-sm);
    letter-spacing: 1px;
  }

  .star {
    display: inline-block;
  }

  .star.filled {
    color: #fbbf24;
  }

  .star.empty {
    color: rgba(255, 255, 255, 0.3);
  }

  /* Pagination */
  .pagination {
    background: var(--hero-sidebar-glass-bg);
    backdrop-filter: var(--hero-sidebar-glass-blur);
    -webkit-backdrop-filter: var(--hero-sidebar-glass-blur);
    border: var(--hero-sidebar-glass-border);
    box-shadow: var(--hero-sidebar-glass-shadow);
    border-radius: var(--border-radius-xl);
    padding: var(--space-8);
    text-align: center;
  }

  .pagination-info {
    margin-bottom: var(--space-6);
  }

  .pagination-text {
    color: var(--color-text-muted);
  }

  .pagination-total {
    color: var(--color-text-subtle);
    font-size: var(--font-size-xs);
  }

  .pagination-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-4);
    flex-wrap: wrap;
  }

  .pagination-btn svg {
    width: 1rem;
    height: 1rem;
  }

  .pagination-pages {
    display: flex;
    gap: var(--space-2);
  }

  .pagination-page {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    background: rgba(255, 255, 255, 0.7);
    color: var(--color-text-muted);
    text-decoration: none;
    border-radius: var(--border-radius-lg);
    font-weight: var(--font-weight-medium);
    font-size: var(--font-size-sm);
    transition: all var(--duration-200) ease;
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .pagination-page:hover {
    background: rgba(147, 51, 234, 0.1);
    color: var(--color-primary-600);
    border-color: rgba(147, 51, 234, 0.3);
  }

  .pagination-page.active {
    background: var(--gradient-primary);
    color: white;
    border-color: transparent;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .games-hero {
      padding: var(--space-12) 0 var(--space-8);
      min-height: 60vh;
    }

    .games-title {
      font-size: var(--font-size-3xl);
    }

    .games-grid {
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: var(--space-6);
    }

    .breadcrumb {
      justify-content: flex-start;
    }
  }

  @media (max-width: 480px) {
    .games-hero {
      padding: var(--space-8) 0 var(--space-6);
    }

    .games-stats {
      gap: var(--space-4);
    }

    .stat {
      min-width: 100px;
      padding: var(--space-3) var(--space-4);
    }

    .pagination-controls {
      flex-direction: column;
      gap: var(--space-6);
    }

    .pagination-pages {
      order: -1;
    }
  }
</style>

<!-- 引入交互系统 -->
<script>
  import '@/scripts/interactions.js'
</script>

<script>
  // Enhanced interactions for games page
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.game-card');

    // Intersection Observer for card animations
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            (entry.target as HTMLElement).style.animationPlayState = 'running';
          }
        });
      },
      { threshold: 0.1 }
    );

    cards.forEach((card) => {
      observer.observe(card);
    });

    // Click effects
    document.addEventListener('click', (e) => {
      const gameCard = (e.target as Element)?.closest?.('.game-card');
      if (gameCard) {
        (gameCard as HTMLElement).style.transform = 'scale(0.98)';
        setTimeout(() => {
          (gameCard as HTMLElement).style.transform = '';
        }, 150);
      }
    });

    // Enhanced hover effects
    cards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        (card as HTMLElement).style.zIndex = '10';
      });

      card.addEventListener('mouseleave', () => {
        (card as HTMLElement).style.zIndex = '1';
      });
    });
  });
</script>
