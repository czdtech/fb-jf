---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import Navigation from '@/components/Navigation.astro';
import Footer from '@/components/Footer.astro';
import GamesHero from '@/components/games/GamesHero.astro';
import GameFilters from '@/components/games/GameFilters.astro';
import GameGrid from '@/components/GameGrid.astro';
import UnifiedPagination from '@/components/UnifiedPagination.astro';
import { generateHreflangLinks } from '@/utils/hreflang';
import { getLocalizedGamesList } from '@/utils/i18n';
import { getTranslation } from '@/i18n/utils';
import type { SupportedLocale } from '@/i18n/utils';
import { PAGINATION_CONFIG } from '@/config/pagination';
import UrlService from '@/utils/url-service';

// 导入数据
import extractedData from '@/data/extracted-data.json';

// --- 环境变量 ---
const SITE_URL = Astro.site.toString().replace(/\/$/, '');

// --- 当前语言配置（英文默认） ---
const currentLocale: SupportedLocale = 'en';

// --- 类型定义 ---
interface GamePageItem {
  slug: string;
  url: string;
  imageUrl: string;
  title: string;
  category: string;
  rating: number;
  description: string;
  iframe: string;
}

// --- 静态路径生成 ---
export async function getStaticPaths() {
  // 直接在函数内定义当前语言
  const locale: SupportedLocale = 'en';
  
  // 获取英文游戏列表
  const localizedGames = await getLocalizedGamesList(locale);
  
  // 格式化游戏数据
  const formattedGames: GamePageItem[] = localizedGames.map((game: any) => {
    const normalizedData = UrlService.normalizeGameData(game);
    const baseSlug = normalizedData.baseSlug;
    
    return {
      slug: baseSlug,
      url: `/${baseSlug}/`, // 英文游戏无语言前缀
      imageUrl: game.data.image,
      title: game.data.title,
      category: game.data.category,
      rating: game.data.rating?.score || 5,
      description: game.data.description,
      iframe: game.data.iframe,
    };
  });

  const totalGames = formattedGames.length;
  const totalPages = Math.ceil(totalGames / PAGINATION_CONFIG.GAMES_PER_PAGE);

  const paths: Array<{
    params: { page?: string };
    props: {
      page: {
        data: GamePageItem[];
        currentPage: number;
        lastPage: number;
        total: number;
        start: number;
        url: {
          prev?: string;
          next?: string;
        };
      };
      allGames: GamePageItem[];
      locale: string;
    };
  }> = [];

  // 为英文生成所有分页路径
  for (let i = 1; i <= totalPages; i++) {
    const startIndex = (i - 1) * PAGINATION_CONFIG.GAMES_PER_PAGE;
    const endIndex = startIndex + PAGINATION_CONFIG.GAMES_PER_PAGE;
    const currentPageGames = formattedGames.slice(startIndex, endIndex);

    paths.push({
      params: {
        page: i === 1 ? undefined : i.toString()
      },
      props: {
        page: {
          data: currentPageGames,
          currentPage: i,
          lastPage: totalPages,
          total: totalGames,
          start: startIndex,
          url: {
            prev: i > 1 ? (i === 2 ? `/games/` : `/games/${i - 1}/`) : undefined,
            next: i < totalPages ? `/games/${i + 1}/` : undefined
          }
        },
        allGames: formattedGames,
        locale: locale
      },
    });
  }

  console.log(`📊 Generated ${totalPages} English pages with ${totalGames} games for /games/`);
  return paths;
}

// --- 页面属性 ---
const { page, allGames, locale } = Astro.props as {
  page: {
    data: GamePageItem[];
    currentPage: number;
    lastPage: number;
    total: number;
    start: number;
    url: {
      prev?: string;
      next?: string;
    };
  };
  allGames: GamePageItem[];
  locale: string;
};

console.log(`🔍 Processing English games page: /games/, page: ${page.currentPage}`);

// 获取英文翻译
const translation = await getTranslation(currentLocale);
const ui = translation.ui || {};

// --- 从extractedData中获取导航数据 ---
const { navigation } = extractedData;

// --- 从extractedData中获取游戏分类 ---
const categories = [
  { name: ui.navigation?.allGames || 'All Games', count: allGames.length, active: true },
  { name: 'Music', count: allGames.filter(g => g.category === 'Music').length, active: false },
  { name: 'Rhythm', count: allGames.filter(g => g.category === 'Rhythm').length, active: false },
  { name: 'Creative', count: allGames.filter(g => g.category === 'Creative').length, active: false },
];

// --- 多语言配置（统一使用工具函数生成） ---
const currentPath = `/games${page.currentPage > 1 ? `/${page.currentPage}` : ''}/`;

const hreflangLinks = generateHreflangLinks(
  navigation?.languages || [],
  `/games${page.currentPage > 1 ? `/${page.currentPage}` : ''}/`,
  SITE_URL
);

// --- SEO配置 ---
const pageTitle = page.currentPage === 1
  ? (ui.meta?.title || "All Music Creation Games - Fiddlebops")
  : `Music Games - Page ${page.currentPage} - Fiddlebops`;

const pageDescription = page.currentPage === 1
  ? (ui.meta?.description || "Explore our complete collection of music creation games. Play Fiddlebops, Sprunki, and more innovative rhythm games online for free.")
  : `Browse page ${page.currentPage} of our music creation games collection. Discover new Fiddlebops and Sprunki games to play online.`;

const meta = {
  title: pageTitle,
  description: pageDescription,
  keywords: ui.meta?.keywords || `music games, rhythm games, fiddlebops, sprunki, online games, free games${page.currentPage > 1 ? `, page ${page.currentPage}` : ''}`,
  canonical: `${SITE_URL}${currentPath}`,
  ogImage: `${SITE_URL}/tw.jpg`,
  prevUrl: page.url.prev ? `${SITE_URL}${page.url.prev}` : undefined,
  nextUrl: page.url.next ? `${SITE_URL}${page.url.next}` : undefined
};

// --- 结构化数据 ---
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": meta.title,
  "description": meta.description,
  "url": meta.canonical,
  "numberOfItems": page.total,
  "hasPart": page.data.map(game => ({
    "@type": "Game",
    "name": game.title,
    "url": `${SITE_URL}${game.url}`,
    "image": `${SITE_URL}${game.imageUrl}`,
    "genre": game.category
  }))
};

// 游戏展示数据格式化
const displayGames = page.data.map((g: any) => ({ 
  id: g.slug, 
  slug: g.slug, 
  title: g.title, 
  description: g.description || '', 
  image: g.imageUrl, 
  iframe: g.iframe || '', 
  category: g.category || 'popular', 
  meta: { 
    title: g.title, 
    description: g.description || '', 
    canonical: g.url, 
    ogImage: g.imageUrl 
  } 
}));
---

<BaseLayout
  meta={meta}
  hreflang={hreflangLinks}
  structuredData={structuredData}
  lang={currentLocale}
>
  <Navigation
    navigation={navigation.main}
    languages={navigation.languages}
    currentLang={currentLocale}
    currentPath={currentPath}
  />

  <main>
    <!-- Hero Section -->
    <GamesHero
      pageTotal={page.total}
      pageCount={page.lastPage}
      breadcrumbs={{ 
        home: ui.navigation?.home || 'Home', 
        current: ui.navigation?.allGames || 'All Games' 
      }}
      title={{ 
        main: 'All', 
        accent: ui.navigation?.games || 'Games' 
      }}
      subtitle={ui.hero?.subtitle || `${page.total} amazing music creation experiences`}
    />

    <!-- Games Grid -->
    <section class="py-16 bg-gray-50 min-h-[60vh]">
      <div class="responsive-container container-standard">
        <!-- Game Filters -->
        <GameFilters categories={categories} totalGames={allGames.length} />

        <!-- Results Info -->
        <div class="mb-8 text-center results-info">
          <p class="text-sm text-gray-600">
            Showing {page.start + 1}-{Math.min(page.start + page.data.length, page.total)} of {page.total} games
          </p>
        </div>

        <!-- Games Grid -->
        <GameGrid games={displayGames} variant="standard" />

        <!-- Pagination -->
        <UnifiedPagination
          currentPage={page.currentPage}
          totalPages={page.lastPage}
          totalItems={page.total}
          basePath="/games"
          variant="games"
        />
      </div>
    </section>
  </main>

  <Footer />
</BaseLayout>