#!/usr/bin/env node\n\n/**\n * FiddleBops游戏内容翻译脚本\n * 用于批量翻译游戏markdown文件到多种语言\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\n// 支持的语言配置\nconst LANGUAGES = {\n  zh: '简体中文',\n  es: '西班牙语',\n  fr: '法语', \n  de: '德语',\n  ja: '日语',\n  ko: '韩语'\n};\n\n// 路径配置\nconst GAMES_DIR = path.join(__dirname, '../src/content/games');\nconst EN_DIR = path.join(GAMES_DIR, 'en');\nconst PROMPT_FILE = path.join(__dirname, '../.claude/game-translation-prompt.md');\n\n/**\n * 读取游戏文件内容\n */\nfunction readGameFile(filePath) {\n  try {\n    return fs.readFileSync(filePath, 'utf8');\n  } catch (error) {\n    console.error(`无法读取文件 ${filePath}:`, error.message);\n    return null;\n  }\n}\n\n/**\n * 写入翻译后的游戏文件\n */\nfunction writeGameFile(filePath, content) {\n  try {\n    const dir = path.dirname(filePath);\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n    fs.writeFileSync(filePath, content, 'utf8');\n    console.log(`✓ 已保存: ${filePath}`);\n    return true;\n  } catch (error) {\n    console.error(`无法写入文件 ${filePath}:`, error.message);\n    return false;\n  }\n}\n\n/**\n * 生成Claude翻译提示词\n */\nfunction generateTranslationPrompt(gameContent, targetLanguage) {\n  const promptTemplate = fs.readFileSync(PROMPT_FILE, 'utf8');\n  return promptTemplate.replace('{TARGET_LANGUAGE}', LANGUAGES[targetLanguage]) + '\\n\\n' + gameContent;\n}\n\n/**\n * 获取所有英文游戏文件\n */\nfunction getEnglishGameFiles() {\n  try {\n    return fs.readdirSync(EN_DIR)\n      .filter(file => file.endsWith('.md'))\n      .map(file => path.join(EN_DIR, file));\n  } catch (error) {\n    console.error('无法读取英文游戏目录:', error.message);\n    return [];\n  }\n}\n\n/**\n * 检查翻译是否已存在\n */\nfunction translationExists(gameSlug, locale) {\n  const translatedPath = path.join(GAMES_DIR, locale, `${gameSlug}.md`);\n  return fs.existsSync(translatedPath);\n}\n\n/**\n * 主翻译函数\n */\nasync function translateGame(gameFile, targetLocale) {\n  const gameSlug = path.basename(gameFile, '.md');\n  \n  // 检查翻译是否已存在\n  if (translationExists(gameSlug, targetLocale)) {\n    console.log(`⏭ 跳过 ${gameSlug} (${targetLocale}) - 翻译已存在`);\n    return true;\n  }\n  \n  // 读取原始内容\n  const originalContent = readGameFile(gameFile);\n  if (!originalContent) {\n    return false;\n  }\n  \n  // 生成翻译提示词\n  const translationPrompt = generateTranslationPrompt(originalContent, targetLocale);\n  \n  console.log(`\\n🔄 准备翻译: ${gameSlug} -> ${LANGUAGES[targetLocale]}`);\n  console.log('📝 翻译提示词已准备好，请将以下内容粘贴到Claude:');\n  console.log('=' * 80);\n  console.log(translationPrompt);\n  console.log('=' * 80);\n  \n  // 等待用户输入翻译结果\n  const readline = require('readline');\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  \n  return new Promise((resolve) => {\n    rl.question('\\n请粘贴Claude的翻译结果（完整的markdown文件内容），然后按回车：\\n', (translatedContent) => {\n      rl.close();\n      \n      if (translatedContent.trim()) {\n        const outputPath = path.join(GAMES_DIR, targetLocale, `${gameSlug}.md`);\n        const success = writeGameFile(outputPath, translatedContent.trim());\n        resolve(success);\n      } else {\n        console.log('❌ 未输入翻译内容，跳过此文件');\n        resolve(false);\n      }\n    });\n  });\n}\n\n/**\n * 批量翻译游戏\n */\nasync function batchTranslate(targetLocale = null, gameSlug = null) {\n  console.log('🚀 FiddleBops游戏翻译脚本启动\\n');\n  \n  let gameFiles = [];\n  \n  if (gameSlug) {\n    // 翻译单个游戏\n    const singleGameFile = path.join(EN_DIR, `${gameSlug}.md`);\n    if (fs.existsSync(singleGameFile)) {\n      gameFiles = [singleGameFile];\n    } else {\n      console.error(`❌ 游戏文件不存在: ${singleGameFile}`);\n      return;\n    }\n  } else {\n    // 翻译所有游戏\n    gameFiles = getEnglishGameFiles();\n  }\n  \n  const targetLocales = targetLocale ? [targetLocale] : Object.keys(LANGUAGES);\n  \n  console.log(`📊 翻译统计:`);\n  console.log(`   游戏数量: ${gameFiles.length}`);\n  console.log(`   目标语言: ${targetLocales.map(l => LANGUAGES[l]).join(', ')}`);\n  console.log(`   预估任务: ${gameFiles.length * targetLocales.length}\\n`);\n  \n  let successCount = 0;\n  let totalCount = 0;\n  \n  for (const gameFile of gameFiles) {\n    for (const locale of targetLocales) {\n      totalCount++;\n      const success = await translateGame(gameFile, locale);\n      if (success) {\n        successCount++;\n      }\n    }\n  }\n  \n  console.log(`\\n🎉 翻译完成！`);\n  console.log(`   成功: ${successCount}/${totalCount}`);\n  console.log(`   失败: ${totalCount - successCount}/${totalCount}`);\n}\n\n// 命令行参数处理\nconst args = process.argv.slice(2);\nconst targetLocale = args[0] && Object.keys(LANGUAGES).includes(args[0]) ? args[0] : null;\nconst gameSlug = args[1] || null;\n\nif (args.length === 0) {\n  console.log('使用方法:');\n  console.log('  node translate-games.js [语言代码] [游戏slug]');\n  console.log('  ');\n  console.log('示例:');\n  console.log('  node translate-games.js zh              # 翻译所有游戏到中文');\n  console.log('  node translate-games.js zh sprunki-retake  # 翻译单个游戏到中文');\n  console.log('  node translate-games.js                 # 翻译所有游戏到所有语言');\n  console.log('');\n  console.log('支持的语言代码:', Object.keys(LANGUAGES).join(', '));\n  process.exit(0);\n}\n\n// 启动翻译\nbatchTranslate(targetLocale, gameSlug).catch(error => {\n  console.error('❌ 翻译脚本执行失败:', error.message);\n  process.exit(1);\n});